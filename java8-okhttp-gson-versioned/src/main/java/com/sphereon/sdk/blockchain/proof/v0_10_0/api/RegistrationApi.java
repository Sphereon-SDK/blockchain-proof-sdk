/*
 * Blockchain Proof
 * With the Blockchain Proof API it is easy to prove or disprove existence of data at a certain point in time. Behind the scenes it stores entries using the Factom (bitcoin), Multichain or Ethereum blockchain by means of our generic blockchain API.    The flow is generally as follows:  1. Make sure a configuration is present  2. Register content by uploading a file, some content, or providing a Stream Location from the Storage API. When you upload content you have to tell the API whether the data has already been hashed or not. If not, or when uploading a file or stream location, the API will take care of the hashing  3. Verify content by uploading a file, some content, or providing a Stream Location from the Storage API. When you upload content you have to tell the API whether the data has already been hashed or not. If not, or when uploading a file or stream location, the API will take care of the hashing. You will get back whether the content has been registered previously or not    Full API Documentation: https://docs.sphereon.com/api/blockchain-proof/0.10/html  Interactive testing: A web based test console is available in the Sphereon API Store at https://store.sphereon.com
 *
 * OpenAPI spec version: 0.10
 * Contact: dev@sphereon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.sphereon.sdk.blockchain.proof.v0_10_0.api;

import com.sphereon.sdk.blockchain.proof.v0_10_0.handler.ApiCallback;
import com.sphereon.sdk.blockchain.proof.v0_10_0.handler.ApiClient;
import com.sphereon.sdk.blockchain.proof.v0_10_0.handler.ApiException;
import com.sphereon.sdk.blockchain.proof.v0_10_0.handler.ApiResponse;
import com.sphereon.sdk.blockchain.proof.v0_10_0.handler.Configuration;
import com.sphereon.sdk.blockchain.proof.v0_10_0.handler.Pair;
import com.sphereon.sdk.blockchain.proof.v0_10_0.handler.ProgressRequestBody;
import com.sphereon.sdk.blockchain.proof.v0_10_0.handler.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.sphereon.sdk.blockchain.proof.v0_10_0.model.ContentRequest;
import com.sphereon.sdk.blockchain.proof.v0_10_0.model.ErrorResponse;
import java.io.File;
import com.sphereon.sdk.blockchain.proof.v0_10_0.model.RegisterContentResponse;
import com.sphereon.sdk.blockchain.proof.v0_10_0.model.StreamLocation;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RegistrationApi {
    private ApiClient apiClient;

    public RegistrationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RegistrationApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for registerUsingContent
     * @param configName The configuration name this operation (required)
     * @param existence Register content using the current settings (required)
     * @param requestId Optional request id (optional)
     * @param base64Secret An alternate secret key in base64 format that overrides the value in your configuration. (optional)
     * @param suppliedSignature An alternate supplied Signature in base64 format that overrides the signature generation. (optional)
     * @param keyId An alternate crypto keys API id that will be used for signature generation. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call registerUsingContentCall(String configName, ContentRequest existence, String requestId, String base64Secret, String suppliedSignature, String keyId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = existence;
        
        // create path and map variables
        String localVarPath = "/existence/{configName}/content"
            .replaceAll("\\{" + "configName" + "\\}", apiClient.escapeString(configName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (requestId != null)
        localVarHeaderParams.put("requestId", apiClient.parameterToString(requestId));
        if (base64Secret != null)
        localVarHeaderParams.put("base64Secret", apiClient.parameterToString(base64Secret));
        if (suppliedSignature != null)
        localVarHeaderParams.put("suppliedSignature", apiClient.parameterToString(suppliedSignature));
        if (keyId != null)
        localVarHeaderParams.put("keyId", apiClient.parameterToString(keyId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2schema" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call registerUsingContentValidateBeforeCall(String configName, ContentRequest existence, String requestId, String base64Secret, String suppliedSignature, String keyId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'configName' is set
        if (configName == null) {
            throw new ApiException("Missing the required parameter 'configName' when calling registerUsingContent(Async)");
        }
        
        // verify the required parameter 'existence' is set
        if (existence == null) {
            throw new ApiException("Missing the required parameter 'existence' when calling registerUsingContent(Async)");
        }
        
        
        com.squareup.okhttp.Call call = registerUsingContentCall(configName, existence, requestId, base64Secret, suppliedSignature, keyId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Register content
     * Register content. Please provide the content in the request. You also have to provide whether you have hashed the content yourself, or whether is should be done on the server side
     * @param configName The configuration name this operation (required)
     * @param existence Register content using the current settings (required)
     * @param requestId Optional request id (optional)
     * @param base64Secret An alternate secret key in base64 format that overrides the value in your configuration. (optional)
     * @param suppliedSignature An alternate supplied Signature in base64 format that overrides the signature generation. (optional)
     * @param keyId An alternate crypto keys API id that will be used for signature generation. (optional)
     * @return RegisterContentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RegisterContentResponse registerUsingContent(String configName, ContentRequest existence, String requestId, String base64Secret, String suppliedSignature, String keyId) throws ApiException {
        ApiResponse<RegisterContentResponse> resp = registerUsingContentWithHttpInfo(configName, existence, requestId, base64Secret, suppliedSignature, keyId);
        return resp.getData();
    }

    /**
     * Register content
     * Register content. Please provide the content in the request. You also have to provide whether you have hashed the content yourself, or whether is should be done on the server side
     * @param configName The configuration name this operation (required)
     * @param existence Register content using the current settings (required)
     * @param requestId Optional request id (optional)
     * @param base64Secret An alternate secret key in base64 format that overrides the value in your configuration. (optional)
     * @param suppliedSignature An alternate supplied Signature in base64 format that overrides the signature generation. (optional)
     * @param keyId An alternate crypto keys API id that will be used for signature generation. (optional)
     * @return ApiResponse&lt;RegisterContentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RegisterContentResponse> registerUsingContentWithHttpInfo(String configName, ContentRequest existence, String requestId, String base64Secret, String suppliedSignature, String keyId) throws ApiException {
        com.squareup.okhttp.Call call = registerUsingContentValidateBeforeCall(configName, existence, requestId, base64Secret, suppliedSignature, keyId, null, null);
        Type localVarReturnType = new TypeToken<RegisterContentResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Register content (asynchronously)
     * Register content. Please provide the content in the request. You also have to provide whether you have hashed the content yourself, or whether is should be done on the server side
     * @param configName The configuration name this operation (required)
     * @param existence Register content using the current settings (required)
     * @param requestId Optional request id (optional)
     * @param base64Secret An alternate secret key in base64 format that overrides the value in your configuration. (optional)
     * @param suppliedSignature An alternate supplied Signature in base64 format that overrides the signature generation. (optional)
     * @param keyId An alternate crypto keys API id that will be used for signature generation. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call registerUsingContentAsync(String configName, ContentRequest existence, String requestId, String base64Secret, String suppliedSignature, String keyId, final ApiCallback<RegisterContentResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = registerUsingContentValidateBeforeCall(configName, existence, requestId, base64Secret, suppliedSignature, keyId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RegisterContentResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for registerUsingLocation
     * @param configName The configuration name this operation (required)
     * @param streamLocation The stream locations on storage (required)
     * @param requestId Optional request id (optional)
     * @param base64Secret An alternate secret key in base64 format that overrides the value in your configuration. (optional)
     * @param suppliedSignature An alternate supplied Signature in base64 format that overrides the signature generation. (optional)
     * @param keyId An alternate crypto keys API id that will be used for signature generation. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call registerUsingLocationCall(String configName, StreamLocation streamLocation, String requestId, String base64Secret, String suppliedSignature, String keyId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = streamLocation;
        
        // create path and map variables
        String localVarPath = "/existence/{configName}/streams/location"
            .replaceAll("\\{" + "configName" + "\\}", apiClient.escapeString(configName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (requestId != null)
        localVarHeaderParams.put("requestId", apiClient.parameterToString(requestId));
        if (base64Secret != null)
        localVarHeaderParams.put("base64Secret", apiClient.parameterToString(base64Secret));
        if (suppliedSignature != null)
        localVarHeaderParams.put("suppliedSignature", apiClient.parameterToString(suppliedSignature));
        if (keyId != null)
        localVarHeaderParams.put("keyId", apiClient.parameterToString(keyId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2schema" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call registerUsingLocationValidateBeforeCall(String configName, StreamLocation streamLocation, String requestId, String base64Secret, String suppliedSignature, String keyId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'configName' is set
        if (configName == null) {
            throw new ApiException("Missing the required parameter 'configName' when calling registerUsingLocation(Async)");
        }
        
        // verify the required parameter 'streamLocation' is set
        if (streamLocation == null) {
            throw new ApiException("Missing the required parameter 'streamLocation' when calling registerUsingLocation(Async)");
        }
        
        
        com.squareup.okhttp.Call call = registerUsingLocationCall(configName, streamLocation, requestId, base64Secret, suppliedSignature, keyId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Register hash using the Storage API
     * Register a hash of file/blob by supplying a Stream location of the Storage API. This Stream Location maps to a location of a file/blob on some remote cloud storage. Hashing will be done on the server side Please note that the binary data itself will not be stored, only the hash. Use the registerUsingContent endpoint if you&#39;d like to store content
     * @param configName The configuration name this operation (required)
     * @param streamLocation The stream locations on storage (required)
     * @param requestId Optional request id (optional)
     * @param base64Secret An alternate secret key in base64 format that overrides the value in your configuration. (optional)
     * @param suppliedSignature An alternate supplied Signature in base64 format that overrides the signature generation. (optional)
     * @param keyId An alternate crypto keys API id that will be used for signature generation. (optional)
     * @return RegisterContentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RegisterContentResponse registerUsingLocation(String configName, StreamLocation streamLocation, String requestId, String base64Secret, String suppliedSignature, String keyId) throws ApiException {
        ApiResponse<RegisterContentResponse> resp = registerUsingLocationWithHttpInfo(configName, streamLocation, requestId, base64Secret, suppliedSignature, keyId);
        return resp.getData();
    }

    /**
     * Register hash using the Storage API
     * Register a hash of file/blob by supplying a Stream location of the Storage API. This Stream Location maps to a location of a file/blob on some remote cloud storage. Hashing will be done on the server side Please note that the binary data itself will not be stored, only the hash. Use the registerUsingContent endpoint if you&#39;d like to store content
     * @param configName The configuration name this operation (required)
     * @param streamLocation The stream locations on storage (required)
     * @param requestId Optional request id (optional)
     * @param base64Secret An alternate secret key in base64 format that overrides the value in your configuration. (optional)
     * @param suppliedSignature An alternate supplied Signature in base64 format that overrides the signature generation. (optional)
     * @param keyId An alternate crypto keys API id that will be used for signature generation. (optional)
     * @return ApiResponse&lt;RegisterContentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RegisterContentResponse> registerUsingLocationWithHttpInfo(String configName, StreamLocation streamLocation, String requestId, String base64Secret, String suppliedSignature, String keyId) throws ApiException {
        com.squareup.okhttp.Call call = registerUsingLocationValidateBeforeCall(configName, streamLocation, requestId, base64Secret, suppliedSignature, keyId, null, null);
        Type localVarReturnType = new TypeToken<RegisterContentResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Register hash using the Storage API (asynchronously)
     * Register a hash of file/blob by supplying a Stream location of the Storage API. This Stream Location maps to a location of a file/blob on some remote cloud storage. Hashing will be done on the server side Please note that the binary data itself will not be stored, only the hash. Use the registerUsingContent endpoint if you&#39;d like to store content
     * @param configName The configuration name this operation (required)
     * @param streamLocation The stream locations on storage (required)
     * @param requestId Optional request id (optional)
     * @param base64Secret An alternate secret key in base64 format that overrides the value in your configuration. (optional)
     * @param suppliedSignature An alternate supplied Signature in base64 format that overrides the signature generation. (optional)
     * @param keyId An alternate crypto keys API id that will be used for signature generation. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call registerUsingLocationAsync(String configName, StreamLocation streamLocation, String requestId, String base64Secret, String suppliedSignature, String keyId, final ApiCallback<RegisterContentResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = registerUsingLocationValidateBeforeCall(configName, streamLocation, requestId, base64Secret, suppliedSignature, keyId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RegisterContentResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for registerUsingStream
     * @param configName The configuration name this operation (required)
     * @param stream The binary data (not hashed). Hashing will be done on the server side. The binary data will not be stored (required)
     * @param fileName Optional input file name. Needed when using bytestreams instead of filestreams (optional)
     * @param requestId Optional request id (optional)
     * @param base64Secret An alternate secret key in base64 format that overrides the value in your configuration. (optional)
     * @param suppliedSignature An alternate supplied Signature in base64 format that overrides the signature generation. (optional)
     * @param keyId An alternate crypto keys API id that will be used for signature generation. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call registerUsingStreamCall(String configName, File stream, String fileName, String requestId, String base64Secret, String suppliedSignature, String keyId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/existence/{configName}/streams/multipart"
            .replaceAll("\\{" + "configName" + "\\}", apiClient.escapeString(configName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (fileName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "fileName", fileName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (requestId != null)
        localVarHeaderParams.put("requestId", apiClient.parameterToString(requestId));
        if (base64Secret != null)
        localVarHeaderParams.put("base64Secret", apiClient.parameterToString(base64Secret));
        if (suppliedSignature != null)
        localVarHeaderParams.put("suppliedSignature", apiClient.parameterToString(suppliedSignature));
        if (keyId != null)
        localVarHeaderParams.put("keyId", apiClient.parameterToString(keyId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (stream != null)
        localVarFormParams.put("stream", stream);

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2schema" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call registerUsingStreamValidateBeforeCall(String configName, File stream, String fileName, String requestId, String base64Secret, String suppliedSignature, String keyId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'configName' is set
        if (configName == null) {
            throw new ApiException("Missing the required parameter 'configName' when calling registerUsingStream(Async)");
        }
        
        // verify the required parameter 'stream' is set
        if (stream == null) {
            throw new ApiException("Missing the required parameter 'stream' when calling registerUsingStream(Async)");
        }
        
        
        com.squareup.okhttp.Call call = registerUsingStreamCall(configName, stream, fileName, requestId, base64Secret, suppliedSignature, keyId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Register bytestream/file hash
     * Register a hash of content by supplying a file or some other binary data. Hashing will be done on the server side. Please note that the binary data itself will not be stored, only the hash. Use the registerUsingContent endpoint if you&#39;d like to store content
     * @param configName The configuration name this operation (required)
     * @param stream The binary data (not hashed). Hashing will be done on the server side. The binary data will not be stored (required)
     * @param fileName Optional input file name. Needed when using bytestreams instead of filestreams (optional)
     * @param requestId Optional request id (optional)
     * @param base64Secret An alternate secret key in base64 format that overrides the value in your configuration. (optional)
     * @param suppliedSignature An alternate supplied Signature in base64 format that overrides the signature generation. (optional)
     * @param keyId An alternate crypto keys API id that will be used for signature generation. (optional)
     * @return RegisterContentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RegisterContentResponse registerUsingStream(String configName, File stream, String fileName, String requestId, String base64Secret, String suppliedSignature, String keyId) throws ApiException {
        ApiResponse<RegisterContentResponse> resp = registerUsingStreamWithHttpInfo(configName, stream, fileName, requestId, base64Secret, suppliedSignature, keyId);
        return resp.getData();
    }

    /**
     * Register bytestream/file hash
     * Register a hash of content by supplying a file or some other binary data. Hashing will be done on the server side. Please note that the binary data itself will not be stored, only the hash. Use the registerUsingContent endpoint if you&#39;d like to store content
     * @param configName The configuration name this operation (required)
     * @param stream The binary data (not hashed). Hashing will be done on the server side. The binary data will not be stored (required)
     * @param fileName Optional input file name. Needed when using bytestreams instead of filestreams (optional)
     * @param requestId Optional request id (optional)
     * @param base64Secret An alternate secret key in base64 format that overrides the value in your configuration. (optional)
     * @param suppliedSignature An alternate supplied Signature in base64 format that overrides the signature generation. (optional)
     * @param keyId An alternate crypto keys API id that will be used for signature generation. (optional)
     * @return ApiResponse&lt;RegisterContentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RegisterContentResponse> registerUsingStreamWithHttpInfo(String configName, File stream, String fileName, String requestId, String base64Secret, String suppliedSignature, String keyId) throws ApiException {
        com.squareup.okhttp.Call call = registerUsingStreamValidateBeforeCall(configName, stream, fileName, requestId, base64Secret, suppliedSignature, keyId, null, null);
        Type localVarReturnType = new TypeToken<RegisterContentResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Register bytestream/file hash (asynchronously)
     * Register a hash of content by supplying a file or some other binary data. Hashing will be done on the server side. Please note that the binary data itself will not be stored, only the hash. Use the registerUsingContent endpoint if you&#39;d like to store content
     * @param configName The configuration name this operation (required)
     * @param stream The binary data (not hashed). Hashing will be done on the server side. The binary data will not be stored (required)
     * @param fileName Optional input file name. Needed when using bytestreams instead of filestreams (optional)
     * @param requestId Optional request id (optional)
     * @param base64Secret An alternate secret key in base64 format that overrides the value in your configuration. (optional)
     * @param suppliedSignature An alternate supplied Signature in base64 format that overrides the signature generation. (optional)
     * @param keyId An alternate crypto keys API id that will be used for signature generation. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call registerUsingStreamAsync(String configName, File stream, String fileName, String requestId, String base64Secret, String suppliedSignature, String keyId, final ApiCallback<RegisterContentResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = registerUsingStreamValidateBeforeCall(configName, stream, fileName, requestId, base64Secret, suppliedSignature, keyId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RegisterContentResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}

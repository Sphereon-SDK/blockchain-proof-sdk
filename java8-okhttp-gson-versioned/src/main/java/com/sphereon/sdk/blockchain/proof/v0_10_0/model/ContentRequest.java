/*
 * Blockchain Proof
 * With the Blockchain Proof API it is easy to prove or disprove existence of data at a certain point in time. Behind the scenes it stores entries using the Factom (bitcoin), Multichain or Ethereum blockchain by means of our generic blockchain API.    The flow is generally as follows:  1. Make sure a configuration is present  2. Register content by uploading a file, some content, or providing a Stream Location from the Storage API. When you upload content you have to tell the API whether the data has already been hashed or not. If not, or when uploading a file or stream location, the API will take care of the hashing  3. Verify content by uploading a file, some content, or providing a Stream Location from the Storage API. When you upload content you have to tell the API whether the data has already been hashed or not. If not, or when uploading a file or stream location, the API will take care of the hashing. You will get back whether the content has been registered previously or not    Full API Documentation: https://docs.sphereon.com/api/blockchain-proof/0.10/html  Interactive testing: A web based test console is available in the Sphereon API Store at https://store.sphereon.com
 *
 * OpenAPI spec version: 0.10
 * Contact: dev@sphereon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.sphereon.sdk.blockchain.proof.v0_10_0.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.sphereon.sdk.blockchain.proof.v0_10_0.model.SignatureSettings;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Content existence request
 */
@ApiModel(description = "Content existence request")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-07-19T05:09:00.320+02:00")
public class ContentRequest {
  /**
   * When CLIENT is supplied the content should already have been hashed by you. When SERVER is supplied we will hash the content. Please note that we do not validate the hash when you supply it
   */
  @JsonAdapter(HashProviderEnum.Adapter.class)
  public enum HashProviderEnum {
    SERVER("SERVER"),
    
    CLIENT("CLIENT");

    private String value;

    HashProviderEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static HashProviderEnum fromValue(String text) {
      for (HashProviderEnum b : HashProviderEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<HashProviderEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final HashProviderEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public HashProviderEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return HashProviderEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("hashProvider")
  private HashProviderEnum hashProvider = null;

  @SerializedName("signatureSettings")
  private SignatureSettings signatureSettings = null;

  @SerializedName("content")
  private byte[] content = null;

  public ContentRequest hashProvider(HashProviderEnum hashProvider) {
    this.hashProvider = hashProvider;
    return this;
  }

   /**
   * When CLIENT is supplied the content should already have been hashed by you. When SERVER is supplied we will hash the content. Please note that we do not validate the hash when you supply it
   * @return hashProvider
  **/
  @ApiModelProperty(required = true, value = "When CLIENT is supplied the content should already have been hashed by you. When SERVER is supplied we will hash the content. Please note that we do not validate the hash when you supply it")
  public HashProviderEnum getHashProvider() {
    return hashProvider;
  }

  public void setHashProvider(HashProviderEnum hashProvider) {
    this.hashProvider = hashProvider;
  }

  public ContentRequest signatureSettings(SignatureSettings signatureSettings) {
    this.signatureSettings = signatureSettings;
    return this;
  }

   /**
   * Optional signature settings like signature type
   * @return signatureSettings
  **/
  @ApiModelProperty(value = "Optional signature settings like signature type")
  public SignatureSettings getSignatureSettings() {
    return signatureSettings;
  }

  public void setSignatureSettings(SignatureSettings signatureSettings) {
    this.signatureSettings = signatureSettings;
  }

  public ContentRequest content(byte[] content) {
    this.content = content;
    return this;
  }

   /**
   * The content to register in base64.
   * @return content
  **/
  @ApiModelProperty(required = true, value = "The content to register in base64.")
  public byte[] getContent() {
    return content;
  }

  public void setContent(byte[] content) {
    this.content = content;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContentRequest contentRequest = (ContentRequest) o;
    return Objects.equals(this.hashProvider, contentRequest.hashProvider) &&
        Objects.equals(this.signatureSettings, contentRequest.signatureSettings) &&
        Objects.equals(this.content, contentRequest.content);
  }

  @Override
  public int hashCode() {
    return Objects.hash(hashProvider, signatureSettings, content);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContentRequest {\n");
    
    sb.append("    hashProvider: ").append(toIndentedString(hashProvider)).append("\n");
    sb.append("    signatureSettings: ").append(toIndentedString(signatureSettings)).append("\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}


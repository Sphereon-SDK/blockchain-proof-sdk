/*
 * Blockchain Proof
 * With the Blockchain Proof API it is easy to prove or disprove existence of data at a certain point in time. Behind the scenes it stores entries using the Factom (bitcoin), Multichain or Ethereum blockchain by means of our generic blockchain API.    The flow is generally as follows:  1. Make sure a configuration is present  2. Register content by uploading a file, some content, or providing a Stream Location from the Storage API. When you upload content you have to tell the API whether the data has already been hashed or not. If not, or when uploading a file or stream location, the API will take care of the hashing  3. Verify content by uploading a file, some content, or providing a Stream Location from the Storage API. When you upload content you have to tell the API whether the data has already been hashed or not. If not, or when uploading a file or stream location, the API will take care of the hashing. You will get back whether the content has been registered previously or not    Full API Documentation: https://docs.sphereon.com/api/blockchain-proof/0.10/html  Interactive testing: A web based test console is available in the Sphereon API Store at https://store.sphereon.com
 *
 * OpenAPI spec version: 0.10
 * Contact: dev@sphereon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.sphereon.sdk.blockchain.proof.v0_10_0.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * How to calculate the signature
 */
@ApiModel(description = "How to calculate the signature")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-07-19T05:09:00.320+02:00")
public class SignatureSettings {
  @SerializedName("base64Secret")
  private String base64Secret = null;

  @SerializedName("keyConfig")
  private String keyConfig = null;

  @SerializedName("suppliedSignature")
  private String suppliedSignature = null;

  /**
   * How to calculate the signature during registration and verification. Defaults to the configured value if omitted
   */
  @JsonAdapter(SignatureTypeEnum.Adapter.class)
  public enum SignatureTypeEnum {
    KEY_ID("KEY_ID"),
    
    SUPPLIED("SUPPLIED"),
    
    SECRET("SECRET"),
    
    NONE("NONE");

    private String value;

    SignatureTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SignatureTypeEnum fromValue(String text) {
      for (SignatureTypeEnum b : SignatureTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<SignatureTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SignatureTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SignatureTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return SignatureTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("signatureType")
  private SignatureTypeEnum signatureType = null;

  @SerializedName("keyId")
  private String keyId = null;

  /**
   * This determines whether yoy use fully qualified keyIds of the crypto-keys API in form (config/keys/keyname/version) or that you only use the keyname and provide the configuration here. The later means we will use the latest version by default
   */
  @JsonAdapter(KeyQualificationEnum.Adapter.class)
  public enum KeyQualificationEnum {
    KEY_NAME_ONLY("KEY_NAME_ONLY"),
    
    FULLY_QUALIFIED_KEY_ID("FULLY_QUALIFIED_KEY_ID");

    private String value;

    KeyQualificationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static KeyQualificationEnum fromValue(String text) {
      for (KeyQualificationEnum b : KeyQualificationEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<KeyQualificationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final KeyQualificationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public KeyQualificationEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return KeyQualificationEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("keyQualification")
  private KeyQualificationEnum keyQualification = null;

  public SignatureSettings base64Secret(String base64Secret) {
    this.base64Secret = base64Secret;
    return this;
  }

   /**
   * An alternate Secret key that overrides the value in your configuration in base64. Used for generating a signature with a base64Secret
   * @return base64Secret
  **/
  @ApiModelProperty(value = "An alternate Secret key that overrides the value in your configuration in base64. Used for generating a signature with a base64Secret")
  public String getBase64Secret() {
    return base64Secret;
  }

  public void setBase64Secret(String base64Secret) {
    this.base64Secret = base64Secret;
  }

  public SignatureSettings keyConfig(String keyConfig) {
    this.keyConfig = keyConfig;
    return this;
  }

   /**
   * Crypto keys config name when KEY_NAME_ONLY is supplied for key qualification
   * @return keyConfig
  **/
  @ApiModelProperty(value = "Crypto keys config name when KEY_NAME_ONLY is supplied for key qualification")
  public String getKeyConfig() {
    return keyConfig;
  }

  public void setKeyConfig(String keyConfig) {
    this.keyConfig = keyConfig;
  }

  public SignatureSettings suppliedSignature(String suppliedSignature) {
    this.suppliedSignature = suppliedSignature;
    return this;
  }

   /**
   * Only use this if you calculate your own signature. Otherwise always leave this blank! We will use the signature as is for registration/verification
   * @return suppliedSignature
  **/
  @ApiModelProperty(value = "Only use this if you calculate your own signature. Otherwise always leave this blank! We will use the signature as is for registration/verification")
  public String getSuppliedSignature() {
    return suppliedSignature;
  }

  public void setSuppliedSignature(String suppliedSignature) {
    this.suppliedSignature = suppliedSignature;
  }

  public SignatureSettings signatureType(SignatureTypeEnum signatureType) {
    this.signatureType = signatureType;
    return this;
  }

   /**
   * How to calculate the signature during registration and verification. Defaults to the configured value if omitted
   * @return signatureType
  **/
  @ApiModelProperty(required = true, value = "How to calculate the signature during registration and verification. Defaults to the configured value if omitted")
  public SignatureTypeEnum getSignatureType() {
    return signatureType;
  }

  public void setSignatureType(SignatureTypeEnum signatureType) {
    this.signatureType = signatureType;
  }

  public SignatureSettings keyId(String keyId) {
    this.keyId = keyId;
    return this;
  }

   /**
   * Use a symmetric or asymmetric key from the crypto keys API to generate the signature.
   * @return keyId
  **/
  @ApiModelProperty(value = "Use a symmetric or asymmetric key from the crypto keys API to generate the signature.")
  public String getKeyId() {
    return keyId;
  }

  public void setKeyId(String keyId) {
    this.keyId = keyId;
  }

  public SignatureSettings keyQualification(KeyQualificationEnum keyQualification) {
    this.keyQualification = keyQualification;
    return this;
  }

   /**
   * This determines whether yoy use fully qualified keyIds of the crypto-keys API in form (config/keys/keyname/version) or that you only use the keyname and provide the configuration here. The later means we will use the latest version by default
   * @return keyQualification
  **/
  @ApiModelProperty(value = "This determines whether yoy use fully qualified keyIds of the crypto-keys API in form (config/keys/keyname/version) or that you only use the keyname and provide the configuration here. The later means we will use the latest version by default")
  public KeyQualificationEnum getKeyQualification() {
    return keyQualification;
  }

  public void setKeyQualification(KeyQualificationEnum keyQualification) {
    this.keyQualification = keyQualification;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SignatureSettings signatureSettings = (SignatureSettings) o;
    return Objects.equals(this.base64Secret, signatureSettings.base64Secret) &&
        Objects.equals(this.keyConfig, signatureSettings.keyConfig) &&
        Objects.equals(this.suppliedSignature, signatureSettings.suppliedSignature) &&
        Objects.equals(this.signatureType, signatureSettings.signatureType) &&
        Objects.equals(this.keyId, signatureSettings.keyId) &&
        Objects.equals(this.keyQualification, signatureSettings.keyQualification);
  }

  @Override
  public int hashCode() {
    return Objects.hash(base64Secret, keyConfig, suppliedSignature, signatureType, keyId, keyQualification);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SignatureSettings {\n");
    
    sb.append("    base64Secret: ").append(toIndentedString(base64Secret)).append("\n");
    sb.append("    keyConfig: ").append(toIndentedString(keyConfig)).append("\n");
    sb.append("    suppliedSignature: ").append(toIndentedString(suppliedSignature)).append("\n");
    sb.append("    signatureType: ").append(toIndentedString(signatureType)).append("\n");
    sb.append("    keyId: ").append(toIndentedString(keyId)).append("\n");
    sb.append("    keyQualification: ").append(toIndentedString(keyQualification)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}


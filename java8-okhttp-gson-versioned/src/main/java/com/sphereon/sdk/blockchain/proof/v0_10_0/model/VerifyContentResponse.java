/*
 * Blockchain Proof
 * With the Blockchain Proof API it is easy to prove or disprove existence of data at a certain point in time. Behind the scenes it stores entries using the Factom (bitcoin), Multichain or Ethereum blockchain by means of our generic blockchain API.    The flow is generally as follows:  1. Make sure a configuration is present  2. Register content by uploading a file, some content, or providing a Stream Location from the Storage API. When you upload content you have to tell the API whether the data has already been hashed or not. If not, or when uploading a file or stream location, the API will take care of the hashing  3. Verify content by uploading a file, some content, or providing a Stream Location from the Storage API. When you upload content you have to tell the API whether the data has already been hashed or not. If not, or when uploading a file or stream location, the API will take care of the hashing. You will get back whether the content has been registered previously or not    Full API Documentation: https://docs.sphereon.com/api/blockchain-proof/0.10/html  Interactive testing: A web based test console is available in the Sphereon API Store at https://store.sphereon.com
 *
 * OpenAPI spec version: 0.10
 * Contact: dev@sphereon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.sphereon.sdk.blockchain.proof.v0_10_0.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.sphereon.sdk.blockchain.proof.v0_10_0.model.CommittedEntry;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;

/**
 * Verify Content response
 */
@ApiModel(description = "Verify Content response")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-07-19T05:09:00.320+02:00")
public class VerifyContentResponse {
  @SerializedName("registrationTime")
  private OffsetDateTime registrationTime = null;

  @SerializedName("contextName")
  private String contextName = null;

  @SerializedName("singleProofChain")
  private CommittedEntry singleProofChain = null;

  /**
   * Gets or Sets contentRegistrationChainTypes
   */
  @JsonAdapter(ContentRegistrationChainTypesEnum.Adapter.class)
  public enum ContentRegistrationChainTypesEnum {
    PER_HASH_PROOF_CHAIN("PER_HASH_PROOF_CHAIN"),
    
    SINGLE_PROOF_CHAIN("SINGLE_PROOF_CHAIN");

    private String value;

    ContentRegistrationChainTypesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ContentRegistrationChainTypesEnum fromValue(String text) {
      for (ContentRegistrationChainTypesEnum b : ContentRegistrationChainTypesEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ContentRegistrationChainTypesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ContentRegistrationChainTypesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ContentRegistrationChainTypesEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ContentRegistrationChainTypesEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("contentRegistrationChainTypes")
  private List<ContentRegistrationChainTypesEnum> contentRegistrationChainTypes = new ArrayList<>();

  /**
   * The signature type from the request or the default from the settings
   */
  @JsonAdapter(SignatureTypeEnum.Adapter.class)
  public enum SignatureTypeEnum {
    KEY_ID("KEY_ID"),
    
    SUPPLIED("SUPPLIED"),
    
    SECRET("SECRET"),
    
    NONE("NONE");

    private String value;

    SignatureTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SignatureTypeEnum fromValue(String text) {
      for (SignatureTypeEnum b : SignatureTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<SignatureTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SignatureTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SignatureTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return SignatureTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("signatureType")
  private SignatureTypeEnum signatureType = null;

  @SerializedName("perHashProofChain")
  private CommittedEntry perHashProofChain = null;

  @SerializedName("requestId")
  private String requestId = null;

  @SerializedName("base64Signature")
  private String base64Signature = null;

  /**
   * This is the registration state from the singleProofChain or the perHashProofChain. If one of the chains has a registration this will return REGISTERED
   */
  @JsonAdapter(RegistrationStateEnum.Adapter.class)
  public enum RegistrationStateEnum {
    NOT_REGISTERED("NOT_REGISTERED"),
    
    PENDING("PENDING"),
    
    REGISTERED("REGISTERED");

    private String value;

    RegistrationStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RegistrationStateEnum fromValue(String text) {
      for (RegistrationStateEnum b : RegistrationStateEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<RegistrationStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RegistrationStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RegistrationStateEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return RegistrationStateEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("registrationState")
  private RegistrationStateEnum registrationState = null;

  /**
   * This is the signature state.
   */
  @JsonAdapter(SignatureStateEnum.Adapter.class)
  public enum SignatureStateEnum {
    NOT_FOUND("NOT_FOUND"),
    
    UNSIGNED("UNSIGNED"),
    
    INVALID("INVALID"),
    
    VERIFIED("VERIFIED");

    private String value;

    SignatureStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SignatureStateEnum fromValue(String text) {
      for (SignatureStateEnum b : SignatureStateEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<SignatureStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SignatureStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SignatureStateEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return SignatureStateEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("signatureState")
  private SignatureStateEnum signatureState = null;

  @SerializedName("hash")
  private String hash = null;

  @SerializedName("signatureStateMessage")
  private String signatureStateMessage = null;

  @SerializedName("hexSignature")
  private String hexSignature = null;

   /**
   * This is the first registration time from the singleProofChain or the perHashProofChain
   * @return registrationTime
  **/
  @ApiModelProperty(value = "This is the first registration time from the singleProofChain or the perHashProofChain")
  public OffsetDateTime getRegistrationTime() {
    return registrationTime;
  }

  public VerifyContentResponse contextName(String contextName) {
    this.contextName = contextName;
    return this;
  }

   /**
   * Get contextName
   * @return contextName
  **/
  @ApiModelProperty(required = true, value = "")
  public String getContextName() {
    return contextName;
  }

  public void setContextName(String contextName) {
    this.contextName = contextName;
  }

  public VerifyContentResponse singleProofChain(CommittedEntry singleProofChain) {
    this.singleProofChain = singleProofChain;
    return this;
  }

   /**
   * This is the single proof chain where all hashes are stored in a single chain (if configured)
   * @return singleProofChain
  **/
  @ApiModelProperty(value = "This is the single proof chain where all hashes are stored in a single chain (if configured)")
  public CommittedEntry getSingleProofChain() {
    return singleProofChain;
  }

  public void setSingleProofChain(CommittedEntry singleProofChain) {
    this.singleProofChain = singleProofChain;
  }

  public VerifyContentResponse contentRegistrationChainTypes(List<ContentRegistrationChainTypesEnum> contentRegistrationChainTypes) {
    this.contentRegistrationChainTypes = contentRegistrationChainTypes;
    return this;
  }

  public VerifyContentResponse addContentRegistrationChainTypesItem(ContentRegistrationChainTypesEnum contentRegistrationChainTypesItem) {
    this.contentRegistrationChainTypes.add(contentRegistrationChainTypesItem);
    return this;
  }

   /**
   * A set of content registration targets
   * @return contentRegistrationChainTypes
  **/
  @ApiModelProperty(required = true, value = "A set of content registration targets")
  public List<ContentRegistrationChainTypesEnum> getContentRegistrationChainTypes() {
    return contentRegistrationChainTypes;
  }

  public void setContentRegistrationChainTypes(List<ContentRegistrationChainTypesEnum> contentRegistrationChainTypes) {
    this.contentRegistrationChainTypes = contentRegistrationChainTypes;
  }

   /**
   * The signature type from the request or the default from the settings
   * @return signatureType
  **/
  @ApiModelProperty(required = true, value = "The signature type from the request or the default from the settings")
  public SignatureTypeEnum getSignatureType() {
    return signatureType;
  }

  public VerifyContentResponse perHashProofChain(CommittedEntry perHashProofChain) {
    this.perHashProofChain = perHashProofChain;
    return this;
  }

   /**
   * This is the proof chain specific for the current hash, so a chain per hash (if configured)
   * @return perHashProofChain
  **/
  @ApiModelProperty(value = "This is the proof chain specific for the current hash, so a chain per hash (if configured)")
  public CommittedEntry getPerHashProofChain() {
    return perHashProofChain;
  }

  public void setPerHashProofChain(CommittedEntry perHashProofChain) {
    this.perHashProofChain = perHashProofChain;
  }

  public VerifyContentResponse requestId(String requestId) {
    this.requestId = requestId;
    return this;
  }

   /**
   * Get requestId
   * @return requestId
  **/
  @ApiModelProperty(value = "")
  public String getRequestId() {
    return requestId;
  }

  public void setRequestId(String requestId) {
    this.requestId = requestId;
  }

   /**
   * The calculated signature in base64 form
   * @return base64Signature
  **/
  @ApiModelProperty(required = true, value = "The calculated signature in base64 form")
  public String getBase64Signature() {
    return base64Signature;
  }

   /**
   * This is the registration state from the singleProofChain or the perHashProofChain. If one of the chains has a registration this will return REGISTERED
   * @return registrationState
  **/
  @ApiModelProperty(value = "This is the registration state from the singleProofChain or the perHashProofChain. If one of the chains has a registration this will return REGISTERED")
  public RegistrationStateEnum getRegistrationState() {
    return registrationState;
  }

  public VerifyContentResponse signatureState(SignatureStateEnum signatureState) {
    this.signatureState = signatureState;
    return this;
  }

   /**
   * This is the signature state.
   * @return signatureState
  **/
  @ApiModelProperty(value = "This is the signature state.")
  public SignatureStateEnum getSignatureState() {
    return signatureState;
  }

  public void setSignatureState(SignatureStateEnum signatureState) {
    this.signatureState = signatureState;
  }

   /**
   * The hash in base64 format that you supplied or that was calculated. This is the actual hash for the content
   * @return hash
  **/
  @ApiModelProperty(required = true, value = "The hash in base64 format that you supplied or that was calculated. This is the actual hash for the content")
  public String getHash() {
    return hash;
  }

  public VerifyContentResponse signatureStateMessage(String signatureStateMessage) {
    this.signatureStateMessage = signatureStateMessage;
    return this;
  }

   /**
   * This is a message describing the signature state.
   * @return signatureStateMessage
  **/
  @ApiModelProperty(value = "This is a message describing the signature state.")
  public String getSignatureStateMessage() {
    return signatureStateMessage;
  }

  public void setSignatureStateMessage(String signatureStateMessage) {
    this.signatureStateMessage = signatureStateMessage;
  }

   /**
   * The calculated signature in hex form
   * @return hexSignature
  **/
  @ApiModelProperty(required = true, value = "The calculated signature in hex form")
  public String getHexSignature() {
    return hexSignature;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VerifyContentResponse verifyContentResponse = (VerifyContentResponse) o;
    return Objects.equals(this.registrationTime, verifyContentResponse.registrationTime) &&
        Objects.equals(this.contextName, verifyContentResponse.contextName) &&
        Objects.equals(this.singleProofChain, verifyContentResponse.singleProofChain) &&
        Objects.equals(this.contentRegistrationChainTypes, verifyContentResponse.contentRegistrationChainTypes) &&
        Objects.equals(this.signatureType, verifyContentResponse.signatureType) &&
        Objects.equals(this.perHashProofChain, verifyContentResponse.perHashProofChain) &&
        Objects.equals(this.requestId, verifyContentResponse.requestId) &&
        Objects.equals(this.base64Signature, verifyContentResponse.base64Signature) &&
        Objects.equals(this.registrationState, verifyContentResponse.registrationState) &&
        Objects.equals(this.signatureState, verifyContentResponse.signatureState) &&
        Objects.equals(this.hash, verifyContentResponse.hash) &&
        Objects.equals(this.signatureStateMessage, verifyContentResponse.signatureStateMessage) &&
        Objects.equals(this.hexSignature, verifyContentResponse.hexSignature);
  }

  @Override
  public int hashCode() {
    return Objects.hash(registrationTime, contextName, singleProofChain, contentRegistrationChainTypes, signatureType, perHashProofChain, requestId, base64Signature, registrationState, signatureState, hash, signatureStateMessage, hexSignature);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VerifyContentResponse {\n");
    
    sb.append("    registrationTime: ").append(toIndentedString(registrationTime)).append("\n");
    sb.append("    contextName: ").append(toIndentedString(contextName)).append("\n");
    sb.append("    singleProofChain: ").append(toIndentedString(singleProofChain)).append("\n");
    sb.append("    contentRegistrationChainTypes: ").append(toIndentedString(contentRegistrationChainTypes)).append("\n");
    sb.append("    signatureType: ").append(toIndentedString(signatureType)).append("\n");
    sb.append("    perHashProofChain: ").append(toIndentedString(perHashProofChain)).append("\n");
    sb.append("    requestId: ").append(toIndentedString(requestId)).append("\n");
    sb.append("    base64Signature: ").append(toIndentedString(base64Signature)).append("\n");
    sb.append("    registrationState: ").append(toIndentedString(registrationState)).append("\n");
    sb.append("    signatureState: ").append(toIndentedString(signatureState)).append("\n");
    sb.append("    hash: ").append(toIndentedString(hash)).append("\n");
    sb.append("    signatureStateMessage: ").append(toIndentedString(signatureStateMessage)).append("\n");
    sb.append("    hexSignature: ").append(toIndentedString(hexSignature)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}


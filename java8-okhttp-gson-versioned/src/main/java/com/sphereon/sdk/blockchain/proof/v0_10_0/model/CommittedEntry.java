/*
 * Blockchain Proof
 * With the Blockchain Proof API it is easy to prove or disprove existence of data at a certain point in time. Behind the scenes it stores entries using the Factom (bitcoin), Multichain or Ethereum blockchain by means of our generic blockchain API.    The flow is generally as follows:  1. Make sure a configuration is present  2. Register content by uploading a file, some content, or providing a Stream Location from the Storage API. When you upload content you have to tell the API whether the data has already been hashed or not. If not, or when uploading a file or stream location, the API will take care of the hashing  3. Verify content by uploading a file, some content, or providing a Stream Location from the Storage API. When you upload content you have to tell the API whether the data has already been hashed or not. If not, or when uploading a file or stream location, the API will take care of the hashing. You will get back whether the content has been registered previously or not    Full API Documentation: https://docs.sphereon.com/api/blockchain-proof/0.10/html  Interactive testing: A web based test console is available in the Sphereon API Store at https://store.sphereon.com
 *
 * OpenAPI spec version: 0.10
 * Contact: dev@sphereon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.sphereon.sdk.blockchain.proof.v0_10_0.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * Commited Entry
 */
@ApiModel(description = "Commited Entry")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-07-19T05:09:00.320+02:00")
public class CommittedEntry {
  @SerializedName("registrationTime")
  private OffsetDateTime registrationTime = null;

  @SerializedName("chainId")
  private String chainId = null;

  @SerializedName("context")
  private String context = null;

  /**
   * The registration state of the entry
   */
  @JsonAdapter(RegistrationStateEnum.Adapter.class)
  public enum RegistrationStateEnum {
    NOT_REGISTERED("NOT_REGISTERED"),
    
    PENDING("PENDING"),
    
    REGISTERED("REGISTERED");

    private String value;

    RegistrationStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RegistrationStateEnum fromValue(String text) {
      for (RegistrationStateEnum b : RegistrationStateEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<RegistrationStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RegistrationStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RegistrationStateEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return RegistrationStateEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("registrationState")
  private RegistrationStateEnum registrationState = null;

  /**
   * This is the signature state.
   */
  @JsonAdapter(SignatureStateEnum.Adapter.class)
  public enum SignatureStateEnum {
    NOT_FOUND("NOT_FOUND"),
    
    UNSIGNED("UNSIGNED"),
    
    INVALID("INVALID"),
    
    VERIFIED("VERIFIED");

    private String value;

    SignatureStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SignatureStateEnum fromValue(String text) {
      for (SignatureStateEnum b : SignatureStateEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<SignatureStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SignatureStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SignatureStateEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return SignatureStateEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("signatureState")
  private SignatureStateEnum signatureState = null;

  @SerializedName("signatureStateMessage")
  private String signatureStateMessage = null;

  @SerializedName("entryId")
  private String entryId = null;

   /**
   * The registration time of the entry. Only when registration has occurred ofcourse
   * @return registrationTime
  **/
  @ApiModelProperty(value = "The registration time of the entry. Only when registration has occurred ofcourse")
  public OffsetDateTime getRegistrationTime() {
    return registrationTime;
  }

   /**
   * Chain Id
   * @return chainId
  **/
  @ApiModelProperty(value = "Chain Id")
  public String getChainId() {
    return chainId;
  }

   /**
   * The context
   * @return context
  **/
  @ApiModelProperty(value = "The context")
  public String getContext() {
    return context;
  }

   /**
   * The registration state of the entry
   * @return registrationState
  **/
  @ApiModelProperty(required = true, value = "The registration state of the entry")
  public RegistrationStateEnum getRegistrationState() {
    return registrationState;
  }

  public CommittedEntry signatureState(SignatureStateEnum signatureState) {
    this.signatureState = signatureState;
    return this;
  }

   /**
   * This is the signature state.
   * @return signatureState
  **/
  @ApiModelProperty(value = "This is the signature state.")
  public SignatureStateEnum getSignatureState() {
    return signatureState;
  }

  public void setSignatureState(SignatureStateEnum signatureState) {
    this.signatureState = signatureState;
  }

  public CommittedEntry signatureStateMessage(String signatureStateMessage) {
    this.signatureStateMessage = signatureStateMessage;
    return this;
  }

   /**
   * This is a message describing the signature state.
   * @return signatureStateMessage
  **/
  @ApiModelProperty(value = "This is a message describing the signature state.")
  public String getSignatureStateMessage() {
    return signatureStateMessage;
  }

  public void setSignatureStateMessage(String signatureStateMessage) {
    this.signatureStateMessage = signatureStateMessage;
  }

   /**
   * The entry Id for the registration
   * @return entryId
  **/
  @ApiModelProperty(required = true, value = "The entry Id for the registration")
  public String getEntryId() {
    return entryId;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CommittedEntry committedEntry = (CommittedEntry) o;
    return Objects.equals(this.registrationTime, committedEntry.registrationTime) &&
        Objects.equals(this.chainId, committedEntry.chainId) &&
        Objects.equals(this.context, committedEntry.context) &&
        Objects.equals(this.registrationState, committedEntry.registrationState) &&
        Objects.equals(this.signatureState, committedEntry.signatureState) &&
        Objects.equals(this.signatureStateMessage, committedEntry.signatureStateMessage) &&
        Objects.equals(this.entryId, committedEntry.entryId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(registrationTime, chainId, context, registrationState, signatureState, signatureStateMessage, entryId);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CommittedEntry {\n");
    
    sb.append("    registrationTime: ").append(toIndentedString(registrationTime)).append("\n");
    sb.append("    chainId: ").append(toIndentedString(chainId)).append("\n");
    sb.append("    context: ").append(toIndentedString(context)).append("\n");
    sb.append("    registrationState: ").append(toIndentedString(registrationState)).append("\n");
    sb.append("    signatureState: ").append(toIndentedString(signatureState)).append("\n");
    sb.append("    signatureStateMessage: ").append(toIndentedString(signatureStateMessage)).append("\n");
    sb.append("    entryId: ").append(toIndentedString(entryId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}


/*
 * Blockchain Proof
 * With the Blockchain Proof API it is easy to prove or disprove existence of data at a certain point in time. Behind the scenes it stores entries using the Factom (bitcoin), Multichain or Ethereum blockchain by means of our generic blockchain API.    The flow is generally as follows:  1. Make sure a configuration is present  2. Register content by uploading a file, some content, or providing a Stream Location from the Storage API. When you upload content you have to tell the API whether the data has already been hashed or not. If not, or when uploading a file or stream location, the API will take care of the hashing  3. Verify content by uploading a file, some content, or providing a Stream Location from the Storage API. When you upload content you have to tell the API whether the data has already been hashed or not. If not, or when uploading a file or stream location, the API will take care of the hashing. You will get back whether the content has been registered previously or not    Full API Documentation: https://docs.sphereon.com/api/blockchain-proof/0.10/html  Interactive testing: A web based test console is available in the Sphereon API Store at https://store.sphereon.com
 *
 * OpenAPI spec version: 0.10
 * Contact: dev@sphereon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.sphereon.sdk.blockchain.proof.v0_10_0.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.sphereon.sdk.blockchain.proof.v0_10_0.model.ChainSettings;
import com.sphereon.sdk.blockchain.proof.v0_10_0.model.CommittedChain;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * The stored chainSettings from the chainSettings chain
 */
@ApiModel(description = "The stored chainSettings from the chainSettings chain")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-07-19T05:09:00.320+02:00")
public class ModelConfiguration {
  @SerializedName("singleProofChain")
  private CommittedChain singleProofChain = null;

  @SerializedName("chainSettings")
  private ChainSettings chainSettings = null;

  @SerializedName("context")
  private String context = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("id")
  private String id = null;

  @SerializedName("validFrom")
  private OffsetDateTime validFrom = null;

  /**
   * Gets or Sets accessMode
   */
  @JsonAdapter(AccessModeEnum.Adapter.class)
  public enum AccessModeEnum {
    PUBLIC("PUBLIC"),
    
    PRIVATE("PRIVATE");

    private String value;

    AccessModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AccessModeEnum fromValue(String text) {
      for (AccessModeEnum b : AccessModeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<AccessModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AccessModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AccessModeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return AccessModeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("accessMode")
  private AccessModeEnum accessMode = null;

  public ModelConfiguration singleProofChain(CommittedChain singleProofChain) {
    this.singleProofChain = singleProofChain;
    return this;
  }

   /**
   * Get singleProofChain
   * @return singleProofChain
  **/
  @ApiModelProperty(value = "")
  public CommittedChain getSingleProofChain() {
    return singleProofChain;
  }

  public void setSingleProofChain(CommittedChain singleProofChain) {
    this.singleProofChain = singleProofChain;
  }

  public ModelConfiguration chainSettings(ChainSettings chainSettings) {
    this.chainSettings = chainSettings;
    return this;
  }

   /**
   * Get chainSettings
   * @return chainSettings
  **/
  @ApiModelProperty(required = true, value = "")
  public ChainSettings getChainSettings() {
    return chainSettings;
  }

  public void setChainSettings(ChainSettings chainSettings) {
    this.chainSettings = chainSettings;
  }

   /**
   * Get context
   * @return context
  **/
  @ApiModelProperty(required = true, value = "")
  public String getContext() {
    return context;
  }

   /**
   * Get name
   * @return name
  **/
  @ApiModelProperty(required = true, value = "")
  public String getName() {
    return name;
  }

   /**
   * Get id
   * @return id
  **/
  @ApiModelProperty(required = true, value = "")
  public String getId() {
    return id;
  }

   /**
   * Get validFrom
   * @return validFrom
  **/
  @ApiModelProperty(required = true, value = "")
  public OffsetDateTime getValidFrom() {
    return validFrom;
  }

   /**
   * Get accessMode
   * @return accessMode
  **/
  @ApiModelProperty(required = true, value = "")
  public AccessModeEnum getAccessMode() {
    return accessMode;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModelConfiguration _configuration = (ModelConfiguration) o;
    return Objects.equals(this.singleProofChain, _configuration.singleProofChain) &&
        Objects.equals(this.chainSettings, _configuration.chainSettings) &&
        Objects.equals(this.context, _configuration.context) &&
        Objects.equals(this.name, _configuration.name) &&
        Objects.equals(this.id, _configuration.id) &&
        Objects.equals(this.validFrom, _configuration.validFrom) &&
        Objects.equals(this.accessMode, _configuration.accessMode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(singleProofChain, chainSettings, context, name, id, validFrom, accessMode);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModelConfiguration {\n");
    
    sb.append("    singleProofChain: ").append(toIndentedString(singleProofChain)).append("\n");
    sb.append("    chainSettings: ").append(toIndentedString(chainSettings)).append("\n");
    sb.append("    context: ").append(toIndentedString(context)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    validFrom: ").append(toIndentedString(validFrom)).append("\n");
    sb.append("    accessMode: ").append(toIndentedString(accessMode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}


/*
 * Blockchain Proof
 * With the Blockchain Proof API it is easy to prove or disprove existence of data at a certain point in time. Behind the scenes it stores entries using the Factom (bitcoin), Multichain or Ethereum blockchain by means of our generic blockchain API.    The flow is generally as follows:  1. Make sure a configuration is present  2. Register content by uploading a file, some content, or providing a Stream Location from the Storage API. When you upload content you have to tell the API whether the data has already been hashed or not. If not, or when uploading a file or stream location, the API will take care of the hashing  3. Verify content by uploading a file, some content, or providing a Stream Location from the Storage API. When you upload content you have to tell the API whether the data has already been hashed or not. If not, or when uploading a file or stream location, the API will take care of the hashing. You will get back whether the content has been registered previously or not    Full API Documentation: https://docs.sphereon.com/api/blockchain-proof/0.10/html  Interactive testing: A web based test console is available in the Sphereon API Store at https://store.sphereon.com
 *
 * OpenAPI spec version: 0.10
 * Contact: dev@sphereon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.sphereon.sdk.blockchain.proof.v0_10_0.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.sphereon.sdk.blockchain.proof.v0_10_0.model.SignatureSettings;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * Existence ChainSettings. Normally you only supply them once during chain creation or during a settings update. You can also supply them during a content request, but then it is up to you to also supply the correct setting during verify
 */
@ApiModel(description = "Existence ChainSettings. Normally you only supply them once during chain creation or during a settings update. You can also supply them during a content request, but then it is up to you to also supply the correct setting during verify")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-07-19T05:09:00.320+02:00")
public class ChainSettings {
  @SerializedName("singleProofChain")
  private String singleProofChain = null;

  /**
   * Gets or Sets contentRegistrationChainTypes
   */
  @JsonAdapter(ContentRegistrationChainTypesEnum.Adapter.class)
  public enum ContentRegistrationChainTypesEnum {
    PER_HASH_PROOF_CHAIN("PER_HASH_PROOF_CHAIN"),
    
    SINGLE_PROOF_CHAIN("SINGLE_PROOF_CHAIN");

    private String value;

    ContentRegistrationChainTypesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ContentRegistrationChainTypesEnum fromValue(String text) {
      for (ContentRegistrationChainTypesEnum b : ContentRegistrationChainTypesEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ContentRegistrationChainTypesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ContentRegistrationChainTypesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ContentRegistrationChainTypesEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ContentRegistrationChainTypesEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("contentRegistrationChainTypes")
  private List<ContentRegistrationChainTypesEnum> contentRegistrationChainTypes = new ArrayList<>();

  @SerializedName("signatureSettings")
  private SignatureSettings signatureSettings = null;

  /**
   * The settings version (only 1 for now)
   */
  @JsonAdapter(VersionEnum.Adapter.class)
  public enum VersionEnum {
    NUMBER_1(1);

    private Integer value;

    VersionEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static VersionEnum fromValue(String text) {
      for (VersionEnum b : VersionEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<VersionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VersionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VersionEnum read(final JsonReader jsonReader) throws IOException {
        Integer value = jsonReader.nextInt();
        return VersionEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("version")
  private VersionEnum version = null;

  /**
   * The hashing method used for the content. We always return and expect the hash in base64 form
   */
  @JsonAdapter(HashAlgorithmEnum.Adapter.class)
  public enum HashAlgorithmEnum {
    _256("SHA_256"),
    
    _512("SHA_512");

    private String value;

    HashAlgorithmEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static HashAlgorithmEnum fromValue(String text) {
      for (HashAlgorithmEnum b : HashAlgorithmEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<HashAlgorithmEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final HashAlgorithmEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public HashAlgorithmEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return HashAlgorithmEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("hashAlgorithm")
  private HashAlgorithmEnum hashAlgorithm = null;

  public ChainSettings singleProofChain(String singleProofChain) {
    this.singleProofChain = singleProofChain;
    return this;
  }

   /**
   * The proof chain Id linked to the current configuration. This is a shared proof chain for all registrations/hashes. Only when the single proof chain type has been configured.
   * @return singleProofChain
  **/
  @ApiModelProperty(value = "The proof chain Id linked to the current configuration. This is a shared proof chain for all registrations/hashes. Only when the single proof chain type has been configured.")
  public String getSingleProofChain() {
    return singleProofChain;
  }

  public void setSingleProofChain(String singleProofChain) {
    this.singleProofChain = singleProofChain;
  }

  public ChainSettings contentRegistrationChainTypes(List<ContentRegistrationChainTypesEnum> contentRegistrationChainTypes) {
    this.contentRegistrationChainTypes = contentRegistrationChainTypes;
    return this;
  }

  public ChainSettings addContentRegistrationChainTypesItem(ContentRegistrationChainTypesEnum contentRegistrationChainTypesItem) {
    this.contentRegistrationChainTypes.add(contentRegistrationChainTypesItem);
    return this;
  }

   /**
   * A set of content registration chain types. This can be a single proof chain for all hashes, a more powerful chain per hash, or both
   * @return contentRegistrationChainTypes
  **/
  @ApiModelProperty(required = true, value = "A set of content registration chain types. This can be a single proof chain for all hashes, a more powerful chain per hash, or both")
  public List<ContentRegistrationChainTypesEnum> getContentRegistrationChainTypes() {
    return contentRegistrationChainTypes;
  }

  public void setContentRegistrationChainTypes(List<ContentRegistrationChainTypesEnum> contentRegistrationChainTypes) {
    this.contentRegistrationChainTypes = contentRegistrationChainTypes;
  }

  public ChainSettings signatureSettings(SignatureSettings signatureSettings) {
    this.signatureSettings = signatureSettings;
    return this;
  }

   /**
   * Settings that determine how the signature should be registered/verified
   * @return signatureSettings
  **/
  @ApiModelProperty(required = true, value = "Settings that determine how the signature should be registered/verified")
  public SignatureSettings getSignatureSettings() {
    return signatureSettings;
  }

  public void setSignatureSettings(SignatureSettings signatureSettings) {
    this.signatureSettings = signatureSettings;
  }

  public ChainSettings version(VersionEnum version) {
    this.version = version;
    return this;
  }

   /**
   * The settings version (only 1 for now)
   * @return version
  **/
  @ApiModelProperty(required = true, value = "The settings version (only 1 for now)")
  public VersionEnum getVersion() {
    return version;
  }

  public void setVersion(VersionEnum version) {
    this.version = version;
  }

  public ChainSettings hashAlgorithm(HashAlgorithmEnum hashAlgorithm) {
    this.hashAlgorithm = hashAlgorithm;
    return this;
  }

   /**
   * The hashing method used for the content. We always return and expect the hash in base64 form
   * @return hashAlgorithm
  **/
  @ApiModelProperty(value = "The hashing method used for the content. We always return and expect the hash in base64 form")
  public HashAlgorithmEnum getHashAlgorithm() {
    return hashAlgorithm;
  }

  public void setHashAlgorithm(HashAlgorithmEnum hashAlgorithm) {
    this.hashAlgorithm = hashAlgorithm;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChainSettings chainSettings = (ChainSettings) o;
    return Objects.equals(this.singleProofChain, chainSettings.singleProofChain) &&
        Objects.equals(this.contentRegistrationChainTypes, chainSettings.contentRegistrationChainTypes) &&
        Objects.equals(this.signatureSettings, chainSettings.signatureSettings) &&
        Objects.equals(this.version, chainSettings.version) &&
        Objects.equals(this.hashAlgorithm, chainSettings.hashAlgorithm);
  }

  @Override
  public int hashCode() {
    return Objects.hash(singleProofChain, contentRegistrationChainTypes, signatureSettings, version, hashAlgorithm);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChainSettings {\n");
    
    sb.append("    singleProofChain: ").append(toIndentedString(singleProofChain)).append("\n");
    sb.append("    contentRegistrationChainTypes: ").append(toIndentedString(contentRegistrationChainTypes)).append("\n");
    sb.append("    signatureSettings: ").append(toIndentedString(signatureSettings)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    hashAlgorithm: ").append(toIndentedString(hashAlgorithm)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}


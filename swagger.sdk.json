{
  "basePath": "/blockchain/proof/0.10",
  "paths": {
    "/existence/{configName}/content": {
      "post": {
        "summary": "Verify content",
        "security": [{"oauth2schema": ["global"]}],
        "produces": ["application/json;charset=UTF-8"],
        "description": "Verify content. Please provide the content in the request. You also have to provide whether you have hashed the content yourself, or whether is should be done on the server side",
        "operationId": "verifyUsingContent",
        "responses": {
          "200": {
            "schema": {"$ref": "#/definitions/VerifyContentResponse"},
            "description": "Content exists or not"
          },
          "400": {
            "schema": {"$ref": "#/definitions/ErrorResponse"},
            "description": "Invalid verification request"
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "configName",
            "description": "The configName for this operation",
            "type": "string",
            "required": true
          },
          {
            "schema": {"$ref": "#/definitions/ContentRequest"},
            "in": "body",
            "name": "existence",
            "description": "Verify content using the current settings",
            "required": true
          },
          {
            "in": "header",
            "name": "requestId",
            "description": "Optional request id",
            "type": "string",
            "required": false
          },
          {
            "in": "header",
            "name": "base64Secret",
            "description": "An alternate secret key in base64 format that overrides the value in your configuration.",
            "type": "string",
            "required": false
          },
          {
            "in": "header",
            "name": "suppliedSignature",
            "description": "An alternate supplied Signature in base64 format that overrides the signature generation.",
            "type": "string",
            "required": false
          },
          {
            "in": "header",
            "name": "keyId",
            "description": "An alternate crypto keys API id that will be used for signature generation.",
            "type": "string",
            "required": false
          }
        ],
        "tags": ["Verification"],
        "consumes": ["application/json;charset=UTF-8"]
      },
      "put": {
        "summary": "Register content",
        "security": [{"oauth2schema": ["global"]}],
        "produces": ["application/json;charset=UTF-8"],
        "description": "Register content. Please provide the content in the request. You also have to provide whether you have hashed the content yourself, or whether is should be done on the server side",
        "operationId": "registerUsingContent",
        "responses": {
          "200": {
            "schema": {"$ref": "#/definitions/RegisterContentResponse"},
            "description": "Content already registered"
          },
          "202": {
            "schema": {"$ref": "#/definitions/RegisterContentResponse"},
            "description": "Registration request received"
          },
          "400": {
            "schema": {"$ref": "#/definitions/ErrorResponse"},
            "description": "Invalid registration request"
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "configName",
            "description": "The configuration name this operation",
            "type": "string",
            "required": true
          },
          {
            "schema": {"$ref": "#/definitions/ContentRequest"},
            "in": "body",
            "name": "existence",
            "description": "Register content using the current settings",
            "required": true
          },
          {
            "in": "header",
            "name": "requestId",
            "description": "Optional request id",
            "type": "string",
            "required": false
          },
          {
            "in": "header",
            "name": "base64Secret",
            "description": "An alternate secret key in base64 format that overrides the value in your configuration.",
            "type": "string",
            "required": false
          },
          {
            "in": "header",
            "name": "suppliedSignature",
            "description": "An alternate supplied Signature in base64 format that overrides the signature generation.",
            "type": "string",
            "required": false
          },
          {
            "in": "header",
            "name": "keyId",
            "description": "An alternate crypto keys API id that will be used for signature generation.",
            "type": "string",
            "required": false
          }
        ],
        "tags": ["Registration"],
        "consumes": ["application/json;charset=UTF-8"]
      }
    },
    "/existence/{configName}/streams/multipart": {
      "post": {
        "summary": "Verify bytestream/file hash",
        "security": [{"oauth2schema": ["global"]}],
        "produces": ["application/json;charset=UTF-8"],
        "description": "Verify a hash of content by supplying a file or some other binary data. Hashing will be done on the server side. Please note that the binary data itself will not be stored, only the hash. Use the registerUsingContent endpoint if you'd like to store content",
        "operationId": "verifyUsingStream",
        "responses": {
          "200": {
            "schema": {"$ref": "#/definitions/VerifyContentResponse"},
            "description": "Content exists or not"
          },
          "400": {
            "schema": {"$ref": "#/definitions/ErrorResponse"},
            "description": "Invalid verification request"
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "configName",
            "description": "The configuration name this operation",
            "type": "string",
            "required": true
          },
          {
            "in": "formData",
            "name": "stream",
            "description": "The binary data (not hashed). Hashing will be done on the server side. The binary data will not be stored",
            "type": "file",
            "required": true
          },
          {
            "in": "query",
            "name": "fileName",
            "description": "Optional input file name. Needed when using bytestreams instead of filestreams",
            "type": "string",
            "required": false
          },
          {
            "in": "header",
            "name": "requestId",
            "description": "Optional request id",
            "type": "string",
            "required": false
          },
          {
            "in": "header",
            "name": "base64Secret",
            "description": "An alternate secret key in base64 format that overrides the value in your configuration.",
            "type": "string",
            "required": false
          },
          {
            "in": "header",
            "name": "suppliedSignature",
            "description": "An alternate supplied Signature in base64 format that overrides the signature generation.",
            "type": "string",
            "required": false
          },
          {
            "in": "header",
            "name": "keyId",
            "description": "An alternate crypto keys API id that will be used for signature generation.",
            "type": "string",
            "required": false
          }
        ],
        "tags": ["Verification"],
        "consumes": ["multipart/form-data"]
      },
      "put": {
        "summary": "Register bytestream/file hash",
        "security": [{"oauth2schema": ["global"]}],
        "produces": ["application/json;charset=UTF-8"],
        "description": "Register a hash of content by supplying a file or some other binary data. Hashing will be done on the server side. Please note that the binary data itself will not be stored, only the hash. Use the registerUsingContent endpoint if you'd like to store content",
        "operationId": "registerUsingStream",
        "responses": {
          "200": {
            "schema": {"$ref": "#/definitions/RegisterContentResponse"},
            "description": "Content already registered"
          },
          "202": {
            "schema": {"$ref": "#/definitions/RegisterContentResponse"},
            "description": "Registration request received"
          },
          "400": {
            "schema": {"$ref": "#/definitions/ErrorResponse"},
            "description": "Invalid registration request"
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "configName",
            "description": "The configuration name this operation",
            "type": "string",
            "required": true
          },
          {
            "in": "formData",
            "name": "stream",
            "description": "The binary data (not hashed). Hashing will be done on the server side. The binary data will not be stored",
            "type": "file",
            "required": true
          },
          {
            "in": "query",
            "name": "fileName",
            "description": "Optional input file name. Needed when using bytestreams instead of filestreams",
            "type": "string",
            "required": false
          },
          {
            "in": "header",
            "name": "requestId",
            "description": "Optional request id",
            "type": "string",
            "required": false
          },
          {
            "in": "header",
            "name": "base64Secret",
            "description": "An alternate secret key in base64 format that overrides the value in your configuration.",
            "type": "string",
            "required": false
          },
          {
            "in": "header",
            "name": "suppliedSignature",
            "description": "An alternate supplied Signature in base64 format that overrides the signature generation.",
            "type": "string",
            "required": false
          },
          {
            "in": "header",
            "name": "keyId",
            "description": "An alternate crypto keys API id that will be used for signature generation.",
            "type": "string",
            "required": false
          }
        ],
        "tags": ["Registration"],
        "consumes": ["multipart/form-data"]
      }
    },
    "/config": {"post": {
      "summary": "Create a new configuration",
      "security": [{"oauth2schema": ["global"]}],
      "produces": ["application/json;charset=UTF-8"],
      "description": "Create a new configuration",
      "operationId": "createConfiguration",
      "responses": {
        "200": {
          "schema": {"$ref": "#/definitions/ConfigurationResponse"},
          "description": "Configuration already exists"
        },
        "202": {
          "schema": {"$ref": "#/definitions/ConfigurationResponse"},
          "description": "Configuration request received. Since we do register on the blockchain and this takes some time you will get back a 202 instead of a 201"
        },
        "400": {
          "schema": {"$ref": "#/definitions/ErrorResponse"},
          "description": "Invalid configuration request"
        }
      },
      "parameters": [{
        "schema": {"$ref": "#/definitions/CreateConfigurationRequest"},
        "in": "body",
        "name": "request",
        "description": "Create a new Proof of Existence configuration using the provided settings. The context points to a context of the Easy Blockchain API. When you have no own context, simply use 'multichain' without the quotes as context. You will be using our multichain ledger then, which is recomended during development/testing",
        "required": true
      }],
      "tags": ["Configuration"],
      "consumes": ["application/json;charset=UTF-8"]
    }},
    "/existence/{configName}/streams/location": {
      "post": {
        "summary": "Verify hash using the Storage API",
        "security": [{"oauth2schema": ["global"]}],
        "produces": ["application/json;charset=UTF-8"],
        "description": "Verify a hash of file/blob by supplying a Stream location of the Storage API. This Stream Location maps to a location of a file/blob on some remote cloud storage. Hashing will be done on the server side Please note that the binary data itself will not be stored, only the hash. Use the registerUsingContent endpoint if you'd like to store content",
        "operationId": "verifyUsingLocation",
        "responses": {
          "200": {
            "schema": {"$ref": "#/definitions/VerifyContentResponse"},
            "description": "Content exists or not"
          },
          "400": {
            "schema": {"$ref": "#/definitions/ErrorResponse"},
            "description": "Invalid verification request"
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "configName",
            "description": "The context for this operation",
            "type": "string",
            "required": true
          },
          {
            "schema": {"$ref": "#/definitions/StreamLocation"},
            "in": "body",
            "name": "streamLocation",
            "description": "The stream location on storage",
            "required": true
          },
          {
            "in": "header",
            "name": "requestId",
            "description": "Optional request id",
            "type": "string",
            "required": false
          },
          {
            "in": "header",
            "name": "base64Secret",
            "description": "An alternate secret key in base64 format that overrides the value in your configuration.",
            "type": "string",
            "required": false
          },
          {
            "in": "header",
            "name": "suppliedSignature",
            "description": "An alternate supplied Signature in base64 format that overrides the signature generation.",
            "type": "string",
            "required": false
          },
          {
            "in": "header",
            "name": "keyId",
            "description": "An alternate crypto keys API id that will be used for signature generation.",
            "type": "string",
            "required": false
          }
        ],
        "tags": ["Verification"],
        "consumes": ["application/json;charset=UTF-8"]
      },
      "put": {
        "summary": "Register hash using the Storage API",
        "security": [{"oauth2schema": ["global"]}],
        "produces": ["application/json;charset=UTF-8"],
        "description": "Register a hash of file/blob by supplying a Stream location of the Storage API. This Stream Location maps to a location of a file/blob on some remote cloud storage. Hashing will be done on the server side Please note that the binary data itself will not be stored, only the hash. Use the registerUsingContent endpoint if you'd like to store content",
        "operationId": "registerUsingLocation",
        "responses": {
          "200": {
            "schema": {"$ref": "#/definitions/RegisterContentResponse"},
            "description": "Content already registered"
          },
          "202": {
            "schema": {"$ref": "#/definitions/RegisterContentResponse"},
            "description": "Registration request received"
          },
          "400": {
            "schema": {"$ref": "#/definitions/ErrorResponse"},
            "description": "Invalid registration request"
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "configName",
            "description": "The configuration name this operation",
            "type": "string",
            "required": true
          },
          {
            "schema": {"$ref": "#/definitions/StreamLocation"},
            "in": "body",
            "name": "streamLocation",
            "description": "The stream locations on storage",
            "required": true
          },
          {
            "in": "header",
            "name": "requestId",
            "description": "Optional request id",
            "type": "string",
            "required": false
          },
          {
            "in": "header",
            "name": "base64Secret",
            "description": "An alternate secret key in base64 format that overrides the value in your configuration.",
            "type": "string",
            "required": false
          },
          {
            "in": "header",
            "name": "suppliedSignature",
            "description": "An alternate supplied Signature in base64 format that overrides the signature generation.",
            "type": "string",
            "required": false
          },
          {
            "in": "header",
            "name": "keyId",
            "description": "An alternate crypto keys API id that will be used for signature generation.",
            "type": "string",
            "required": false
          }
        ],
        "tags": ["Registration"],
        "consumes": ["application/json;charset=UTF-8"]
      }
    },
    "/config/{configName}": {"get": {
      "summary": "Get configuration",
      "security": [{"oauth2schema": ["global"]}],
      "produces": ["application/json;charset=UTF-8"],
      "description": "Get the configuration for registration/verification",
      "operationId": "getConfiguration",
      "responses": {
        "200": {
          "schema": {"$ref": "#/definitions/ConfigurationResponse"},
          "description": "The configuration"
        },
        "400": {
          "schema": {"$ref": "#/definitions/ErrorResponse"},
          "description": "Invalid request"
        },
        "404": {
          "schema": {"$ref": "#/definitions/ErrorResponse"},
          "description": "Configuration not found"
        }
      },
      "parameters": [{
        "in": "path",
        "name": "configName",
        "description": "The configuration name for this operation",
        "type": "string",
        "required": true
      }],
      "tags": ["Configuration"],
      "consumes": ["application/json"]
    }}
  },
  "host": "gw.api.cloud.sphereon.com",
  "schemes": ["https"],
  "securityDefinitions": {"oauth2schema": {
    "tokenUrl": "https://gw.api.cloud.sphereon.com/token",
    "scopes": {"global": "accessEverything"},
    "type": "oauth2",
    "flow": "application"
  }},
  "definitions": {
    "CommittedChain": {
      "description": "Committed Chain",
      "type": "object",
      "properties": {
        "chainId": {
          "description": "Chain Id",
          "readOnly": true,
          "type": "string"
        },
        "context": {
          "description": "The context",
          "readOnly": true,
          "type": "string"
        }
      }
    },
    "ConfigurationResponse": {
      "description": "Committed context and settings response",
      "type": "object",
      "required": ["configuration"],
      "properties": {"configuration": {"$ref": "#/definitions/Configuration"}}
    },
    "Configuration": {
      "description": "The stored chainSettings from the chainSettings chain",
      "type": "object",
      "required": [
        "accessMode",
        "chainSettings",
        "context",
        "id",
        "name",
        "validFrom"
      ],
      "properties": {
        "singleProofChain": {
          "readOnly": true,
          "$ref": "#/definitions/CommittedChain"
        },
        "chainSettings": {
          "readOnly": true,
          "$ref": "#/definitions/ChainSettings"
        },
        "context": {
          "readOnly": true,
          "type": "string"
        },
        "name": {
          "readOnly": true,
          "type": "string"
        },
        "contentExtractionSettings": {"$ref": "#/definitions/ContentExtractionSettings"},
        "id": {
          "readOnly": true,
          "type": "string"
        },
        "validFrom": {
          "format": "date-time",
          "readOnly": true,
          "type": "string"
        },
        "accessMode": {
          "readOnly": true,
          "type": "string",
          "enum": [
            "PUBLIC",
            "PRIVATE"
          ]
        }
      }
    },
    "ChainSettings": {
      "description": "Existence ChainSettings. Normally you only supply them once during chain creation or during a settings update. You can also supply them during a content request, but then it is up to you to also supply the correct setting during verify",
      "type": "object",
      "required": [
        "contentRegistrationChainTypes",
        "signatureSettings",
        "version"
      ],
      "properties": {
        "singleProofChain": {
          "description": "The proof chain Id linked to the current configuration. This is a shared proof chain for all registrations/hashes. Only when the single proof chain type has been configured.",
          "type": "string"
        },
        "contentRegistrationChainTypes": {
          "description": "A set of content registration chain types. This can be a single proof chain for all hashes, a more powerful chain per hash, or both",
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "PER_HASH_PROOF_CHAIN",
              "SINGLE_PROOF_CHAIN"
            ]
          }
        },
        "signatureSettings": {
          "description": "Settings that determine how the signature should be registered/verified",
          "$ref": "#/definitions/SignatureSettings"
        },
        "version": {
          "format": "int32",
          "description": "The settings version (only 1 for now)",
          "type": "integer",
          "enum": [1]
        },
        "hashAlgorithm": {
          "description": "The hashing method used for the content. We always return and expect the hash in base64 form",
          "type": "string",
          "enum": [
            "SHA_256",
            "SHA_512"
          ]
        }
      }
    },
    "Error": {
      "description": "An error",
      "type": "object",
      "required": [
        "code",
        "level",
        "message"
      ],
      "properties": {
        "code": {"type": "string"},
        "level": {
          "type": "string",
          "enum": [
            "INFO",
            "WARNING",
            "FATAL"
          ]
        },
        "cause": {"$ref": "#/definitions/Error"},
        "message": {"type": "string"}
      }
    },
    "StreamLocation": {
      "description": "Location record of data stream",
      "type": "object",
      "properties": {
        "folderPath": {
          "description": "The path of the folder in the container (if any). Please note that a folder can be virtual depending on the backend",
          "type": "string"
        },
        "filename": {
          "description": "The current filename",
          "type": "string"
        },
        "id": {
          "description": "The auto generated ID for this location",
          "readOnly": true,
          "type": "string"
        },
        "containerId": {
          "description": "The container Id",
          "type": "string"
        },
        "originalFilename": {
          "description": "The original filename. Handy for later clientside naming",
          "type": "string"
        }
      }
    },
    "ContentExtractionSettings": {
      "description": "Content extraction Settings. Normally proofs are done solely on the full binary content of the file itself. Sometimes you want to look at particular parts of the file. For instance the content of a PDF file. Adobe PDF changes the file on save as, whilst the contents stays the same",
      "type": "object",
      "required": [
        "binaryComparison",
        "contentExtraction"
      ],
      "properties": {
        "binaryComparison": {
          "description": "Whether to do a binary comparison on the file",
          "type": "boolean",
          "example": false
        },
        "contentExtraction": {
          "description": "Whether to try a content extraction comparison on the file",
          "type": "boolean",
          "example": false
        },
        "minimumContentExtractionCharacters": {
          "format": "int32",
          "description": "When using content extraction. Only apply it to content that is larger than the amount of characters specified in here. Please note that you want enough entropy when using content extraction. We suggest to not go lower than this value",
          "type": "integer"
        }
      }
    },
    "SignatureSettings": {
      "description": "How to calculate the signature",
      "type": "object",
      "required": ["signatureType"],
      "properties": {
        "base64Secret": {
          "description": "An alternate Secret key that overrides the value in your configuration in base64. Used for generating a signature with a base64Secret",
          "type": "string"
        },
        "keyConfig": {
          "description": "Crypto keys config name when KEY_NAME_ONLY is supplied for key qualification",
          "type": "string"
        },
        "suppliedSignature": {
          "description": "Only use this if you calculate your own signature. Otherwise always leave this blank! We will use the signature as is for registration/verification",
          "type": "string"
        },
        "signatureType": {
          "description": "How to calculate the signature during registration and verification. Defaults to the configured value if omitted",
          "type": "string",
          "enum": [
            "KEY_ID",
            "SUPPLIED",
            "SECRET",
            "NONE"
          ]
        },
        "keyId": {
          "description": "Use a symmetric or asymmetric key from the crypto keys API to generate the signature.",
          "type": "string"
        },
        "keyQualification": {
          "description": "This determines whether yoy use fully qualified keyIds of the crypto-keys API in form (config/keys/keyname/version) or that you only use the keyname and provide the configuration here. The later means we will use the latest version by default",
          "type": "string",
          "enum": [
            "KEY_NAME_ONLY",
            "FULLY_QUALIFIED_KEY_ID"
          ]
        }
      }
    },
    "ErrorResponse": {
      "description": "The error response",
      "type": "object",
      "properties": {"errors": {
        "type": "array",
        "items": {"$ref": "#/definitions/Error"}
      }}
    },
    "VerifyContentResponse": {
      "description": "Verify Content response",
      "type": "object",
      "required": [
        "base64Signature",
        "contentRegistrationChainTypes",
        "contextName",
        "hash",
        "hexSignature",
        "signatureType"
      ],
      "properties": {
        "registrationTime": {
          "format": "date-time",
          "description": "This is the first registration time from the singleProofChain or the perHashProofChain",
          "readOnly": true,
          "type": "string"
        },
        "contextName": {"type": "string"},
        "singleProofChain": {
          "description": "This is the single proof chain where all hashes are stored in a single chain (if configured)",
          "$ref": "#/definitions/CommittedEntry"
        },
        "contentRegistrationChainTypes": {
          "description": "A set of content registration targets",
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "PER_HASH_PROOF_CHAIN",
              "SINGLE_PROOF_CHAIN"
            ]
          }
        },
        "signatureType": {
          "description": "The signature type from the request or the default from the settings",
          "readOnly": true,
          "type": "string",
          "enum": [
            "KEY_ID",
            "SUPPLIED",
            "SECRET",
            "NONE"
          ]
        },
        "perHashProofChain": {
          "description": "This is the proof chain specific for the current hash, so a chain per hash (if configured)",
          "$ref": "#/definitions/CommittedEntry"
        },
        "requestId": {"type": "string"},
        "base64Signature": {
          "description": "The calculated signature in base64 form",
          "readOnly": true,
          "type": "string"
        },
        "registrationState": {
          "description": "This is the registration state from the singleProofChain or the perHashProofChain. If one of the chains has a registration this will return REGISTERED",
          "readOnly": true,
          "type": "string",
          "enum": [
            "NOT_REGISTERED",
            "PENDING",
            "REGISTERED"
          ]
        },
        "signatureState": {
          "description": "This is the signature state.",
          "type": "string",
          "enum": [
            "NOT_FOUND",
            "UNSIGNED",
            "INVALID",
            "VERIFIED"
          ]
        },
        "hash": {
          "description": "The hash in base64 format that you supplied or that was calculated. This is the actual hash for the content",
          "readOnly": true,
          "type": "string"
        },
        "signatureStateMessage": {
          "description": "This is a message describing the signature state.",
          "type": "string"
        },
        "hexSignature": {
          "description": "The calculated signature in hex form",
          "readOnly": true,
          "type": "string"
        }
      }
    },
    "ContentRequest": {
      "description": "Content existence request",
      "type": "object",
      "required": [
        "content",
        "hashProvider"
      ],
      "properties": {
        "fileName": {
          "description": "Optional fileName. Used when content extraction is enabled and SERVER hashing is being used. This allows better content extraction of binary file formats like Office files. Do not use when using CLIENT as hashProvider",
          "type": "string"
        },
        "hashProvider": {
          "description": "When CLIENT is supplied the content should already have been hashed by you. When SERVER is supplied we will hash the content. Please note that we do not validate the hash when you supply it",
          "type": "string",
          "enum": [
            "SERVER",
            "CLIENT"
          ]
        },
        "signatureSettings": {
          "description": "Optional signature settings like signature type",
          "$ref": "#/definitions/SignatureSettings"
        },
        "content": {
          "format": "byte",
          "description": "The content to register in base64.",
          "type": "string"
        }
      }
    },
    "CommittedEntry": {
      "description": "Commited Entry",
      "type": "object",
      "required": [
        "entryId",
        "registrationState"
      ],
      "properties": {
        "registrationTime": {
          "format": "date-time",
          "description": "The registration time of the entry. Only when registration has occurred ofcourse",
          "readOnly": true,
          "type": "string"
        },
        "chainId": {
          "description": "Chain Id",
          "readOnly": true,
          "type": "string"
        },
        "context": {
          "description": "The context",
          "readOnly": true,
          "type": "string"
        },
        "registrationState": {
          "description": "The registration state of the entry",
          "readOnly": true,
          "type": "string",
          "enum": [
            "NOT_REGISTERED",
            "PENDING",
            "REGISTERED"
          ]
        },
        "signatureState": {
          "description": "This is the signature state.",
          "type": "string",
          "enum": [
            "NOT_FOUND",
            "UNSIGNED",
            "INVALID",
            "VERIFIED"
          ]
        },
        "signatureStateMessage": {
          "description": "This is a message describing the signature state.",
          "type": "string"
        },
        "entryId": {
          "description": "The entry Id for the registration",
          "readOnly": true,
          "type": "string"
        }
      }
    },
    "RegisterContentResponse": {
      "description": "Committed Content response",
      "type": "object",
      "required": [
        "base64Signature",
        "contextName",
        "hash",
        "hexSignature",
        "signatureType"
      ],
      "properties": {
        "contextName": {"type": "string"},
        "singleProofChain": {
          "description": "This is the single proof chain where all hashes are stored (if configured)",
          "$ref": "#/definitions/CommittedEntry"
        },
        "contentRegistrationChainTypes": {
          "description": "A set of content registration targets",
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "PER_HASH_PROOF_CHAIN",
              "SINGLE_PROOF_CHAIN"
            ]
          }
        },
        "requestId": {"type": "string"},
        "signatureType": {
          "description": "The signature type from the request or the default from the settings",
          "readOnly": true,
          "type": "string",
          "enum": [
            "KEY_ID",
            "SUPPLIED",
            "SECRET",
            "NONE"
          ]
        },
        "perHashProofChain": {
          "description": "This is the proof chain specific for the current hash (if configured)",
          "$ref": "#/definitions/CommittedEntry"
        },
        "base64Signature": {
          "description": "The calculated signature in base64 form",
          "readOnly": true,
          "type": "string"
        },
        "hash": {
          "description": "The hash in base64 format that you supplied or that was calculated. This is the actual hash for the content",
          "readOnly": true,
          "type": "string"
        },
        "hexSignature": {
          "description": "The calculated signature in hex form",
          "readOnly": true,
          "type": "string"
        }
      }
    },
    "CreateConfigurationRequest": {
      "description": "Create a context configuration",
      "type": "object",
      "required": [
        "accessMode",
        "context",
        "initialSettings",
        "name"
      ],
      "properties": {
        "initialSettings": {
          "description": "The initial context settings.",
          "$ref": "#/definitions/ChainSettings"
        },
        "context": {
          "description": "The Easy Blockchain API context. This has to be a context you created or a public context",
          "type": "string"
        },
        "name": {
          "description": "The configuration name.",
          "type": "string"
        },
        "contentExtractionSettings": {"$ref": "#/definitions/ContentExtractionSettings"},
        "accessMode": {
          "description": "The access mode for this configuration. Public means accessible to other tenants of the API as well. Currently public is only allowed for Sphereon itself",
          "type": "string",
          "enum": [
            "PUBLIC",
            "PRIVATE"
          ]
        }
      }
    }
  },
  "swagger": "2.0",
  "info": {
    "license": {
      "name": "Apache License Version 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0"
    },
    "contact": {
      "name": "Sphereon DevOps Team",
      "url": "https://sphereon.com",
      "email": "dev@sphereon.com"
    },
    "description": "With the Blockchain Proof API it is easy to prove or disprove existence of data at a certain point in time. Behind the scenes it stores entries using the Factom (bitcoin), Multichain or Ethereum blockchain by means of our generic blockchain API.\r\n\r\nThe flow is generally as follows:\r\n1. Make sure a configuration is present\r\n2. Register content by uploading a file, some content, or providing a Stream Location from the Storage API. When you upload content you have to tell the API whether the data has already been hashed or not. If not, or when uploading a file or stream location, the API will take care of the hashing\r\n3. Verify content by uploading a file, some content, or providing a Stream Location from the Storage API. When you upload content you have to tell the API whether the data has already been hashed or not. If not, or when uploading a file or stream location, the API will take care of the hashing. You will get back whether the content has been registered previously or not\r\n\r\nFull API Documentation: https://docs.sphereon.com/api/blockchain-proof/0.10/html\r\nInteractive testing: A web based test console is available in the Sphereon API Store at https://store.sphereon.com",
    "termsOfService": "https://docs.sphereon.com/api/blockchain-proof/0.10/html",
    "title": "Blockchain Proof",
    "version": "0.10"
  },
  "tags": [
    {
      "name": "Configuration",
      "description": "Configuration related API's"
    },
    {
      "name": "Verification",
      "description": "Verification related API's"
    },
    {
      "name": "Registration",
      "description": "Registration related API's"
    },
    {
      "name": "existence-controller",
      "description": "Existence Controller"
    }
  ]
}
{
  "basePath": "/blockchain/proof/0.9",
  "paths": {
    "/existence/{configName}/content": {
      "post": {
        "summary": "Verify content",
        "security": [{"oauth2schema": ["global"]}],
        "produces": ["application/json;charset=UTF-8"],
        "description": "Verify content. Please provide the content in the request. You also have to provide whether you have hashed the content yourself, or whether is should be done on the server side",
        "operationId": "verifyUsingContent",
        "responses": {
          "200": {
            "schema": {"$ref": "#/definitions/VerifyContentResponse"},
            "description": "Content exists or not"
          },
          "400": {
            "schema": {"$ref": "#/definitions/ErrorResponse"},
            "description": "Invalid verification request"
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "configName",
            "description": "The configName for this operation",
            "type": "string",
            "required": true
          },
          {
            "schema": {"$ref": "#/definitions/ContentRequest"},
            "in": "body",
            "name": "existence",
            "description": "Verify content using the current settings",
            "required": true
          }
        ],
        "tags": ["Verification"],
        "consumes": ["application/json;charset=UTF-8"]
      },
      "put": {
        "summary": "Register content",
        "security": [{"oauth2schema": ["global"]}],
        "produces": ["application/json;charset=UTF-8"],
        "description": "Register content. Please provide the content in the request. You also have to provide whether you have hashed the content yourself, or whether is should be done on the server side",
        "operationId": "registerUsingContent",
        "responses": {
          "200": {
            "schema": {"$ref": "#/definitions/RegisterContentResponse"},
            "description": "Content already registered"
          },
          "400": {
            "schema": {"$ref": "#/definitions/ErrorResponse"},
            "description": "Invalid registration request"
          },
          "202": {
            "schema": {"$ref": "#/definitions/RegisterContentResponse"},
            "description": "Registration request received"
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "configName",
            "description": "The configuration name this operation",
            "type": "string",
            "required": true
          },
          {
            "schema": {"$ref": "#/definitions/ContentRequest"},
            "in": "body",
            "name": "existence",
            "description": "Register content using the current settings",
            "required": true
          }
        ],
        "tags": ["Registration"],
        "consumes": ["application/json;charset=UTF-8"]
      }
    },
    "/existence/{configName}/streams/multipart": {
      "post": {
        "summary": "Verify bytestream/file hash",
        "security": [{"oauth2schema": ["global"]}],
        "produces": ["application/json;charset=UTF-8"],
        "description": "Verify a convertInputToHashWhenNeeded of content by supplying a file or some other binary data. Hashing will be done on the server side. Please note that the binary data itself will not be stored, only the convertInputToHashWhenNeeded. Use the registerUsingContent endpoint if you'd like to store content",
        "operationId": "verifyUsingStream",
        "responses": {
          "200": {
            "schema": {"$ref": "#/definitions/VerifyContentResponse"},
            "description": "Content exists or not"
          },
          "400": {
            "schema": {"$ref": "#/definitions/ErrorResponse"},
            "description": "Invalid verification request"
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "configName",
            "description": "The configuration name this operation",
            "type": "string",
            "required": true
          },
          {
            "in": "formData",
            "name": "stream",
            "description": "The binary data (not hashed). Hashing will be done on the server side. The binary data will not be stored",
            "type": "file",
            "required": true
          },
          {
            "in": "query",
            "name": "fileName",
            "description": "Optional input file name. Needed when using bytestreams instead of filestreams",
            "type": "string",
            "required": false
          }
        ],
        "tags": ["Verification"],
        "consumes": ["multipart/form-data"]
      },
      "put": {
        "summary": "Register bytestream/file hash",
        "security": [{"oauth2schema": ["global"]}],
        "produces": ["application/json;charset=UTF-8"],
        "description": "Register a convertInputToHashWhenNeeded of content by supplying a file or some other binary data. Hashing will be done on the server side. Please note that the binary data itself will not be stored, only the convertInputToHashWhenNeeded. Use the registerUsingContent endpoint if you'd like to store content",
        "operationId": "registerUsingStream",
        "responses": {
          "200": {
            "schema": {"$ref": "#/definitions/RegisterContentResponse"},
            "description": "Content already registered"
          },
          "400": {
            "schema": {"$ref": "#/definitions/ErrorResponse"},
            "description": "Invalid registration request"
          },
          "202": {
            "schema": {"$ref": "#/definitions/RegisterContentResponse"},
            "description": "Registration request received"
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "configName",
            "description": "The configuration name this operation",
            "type": "string",
            "required": true
          },
          {
            "in": "formData",
            "name": "stream",
            "description": "The binary data (not hashed). Hashing will be done on the server side. The binary data will not be stored",
            "type": "file",
            "required": true
          },
          {
            "in": "query",
            "name": "fileName",
            "description": "Optional input file name. Needed when using bytestreams instead of filestreams",
            "type": "string",
            "required": false
          }
        ],
        "tags": ["Registration"],
        "consumes": ["multipart/form-data"]
      }
    },
    "/config": {"post": {
      "summary": "Create a new configuration",
      "security": [{"oauth2schema": ["global"]}],
      "produces": ["application/json;charset=UTF-8"],
      "description": "Create a new configuration",
      "operationId": "createConfiguration",
      "responses": {
        "200": {
          "schema": {"$ref": "#/definitions/ConfigurationResponse"},
          "description": "Configuration already exists"
        },
        "400": {
          "schema": {"$ref": "#/definitions/ErrorResponse"},
          "description": "Invalid configuration request"
        },
        "202": {
          "schema": {"$ref": "#/definitions/ConfigurationResponse"},
          "description": "Configuration request received. Since we do register on the blockchain and this takes some time you will get back a 202 instead of a 201"
        }
      },
      "parameters": [{
        "schema": {"$ref": "#/definitions/CreateConfigurationRequest"},
        "in": "body",
        "name": "request",
        "description": "Create a new Proof of Existence configuration using the provided settings. The context points to a context of the Easy Blockchain API. When you have no own context, simply use 'multichain' without the quotes as context. You will be using our multichain ledger then, which is recomended during development/testing",
        "required": true
      }],
      "tags": ["Configuration"],
      "consumes": ["application/json;charset=UTF-8"]
    }},
    "/existence/{configName}/streams/location": {
      "post": {
        "summary": "Verify hash using the Storage API",
        "security": [{"oauth2schema": ["global"]}],
        "produces": ["application/json;charset=UTF-8"],
        "description": "Verify a convertInputToHashWhenNeeded of file/blob by supplying a Stream location of the Storage API. This Stream Location maps to a location of a file/blob on some remote cloud storage. Hashing will be done on the server side Please note that the binary data itself will not be stored, only the convertInputToHashWhenNeeded. Use the registerUsingContent endpoint if you'd like to store content",
        "operationId": "verifyUsingLocation",
        "responses": {
          "200": {
            "schema": {"$ref": "#/definitions/VerifyContentResponse"},
            "description": "Content exists or not"
          },
          "400": {
            "schema": {"$ref": "#/definitions/ErrorResponse"},
            "description": "Invalid verification request"
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "configName",
            "description": "The context for this operation",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "requestId",
            "description": "Optional request id",
            "type": "string",
            "required": false
          },
          {
            "schema": {"$ref": "#/definitions/StreamLocation"},
            "in": "body",
            "name": "streamLocation",
            "description": "The stream location on storage",
            "required": true
          }
        ],
        "tags": ["Verification"],
        "consumes": ["application/json;charset=UTF-8"]
      },
      "put": {
        "summary": "Register hash using the Storage API",
        "security": [{"oauth2schema": ["global"]}],
        "produces": ["application/json;charset=UTF-8"],
        "description": "Register a convertInputToHashWhenNeeded of file/blob by supplying a Stream location of the Storage API. This Stream Location maps to a location of a file/blob on some remote cloud storage. Hashing will be done on the server side Please note that the binary data itself will not be stored, only the convertInputToHashWhenNeeded. Use the registerUsingContent endpoint if you'd like to store content",
        "operationId": "registerUsingLocation",
        "responses": {
          "200": {
            "schema": {"$ref": "#/definitions/RegisterContentResponse"},
            "description": "Content already registered"
          },
          "400": {
            "schema": {"$ref": "#/definitions/ErrorResponse"},
            "description": "Invalid registration request"
          },
          "202": {
            "schema": {"$ref": "#/definitions/RegisterContentResponse"},
            "description": "Registration request received"
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "configName",
            "description": "The configuration name this operation",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "requestId",
            "description": "Optional request id",
            "type": "string",
            "required": false
          },
          {
            "schema": {"$ref": "#/definitions/StreamLocation"},
            "in": "body",
            "name": "streamLocation",
            "description": "The stream locations on storage",
            "required": true
          }
        ],
        "tags": ["Registration"],
        "consumes": ["application/json;charset=UTF-8"]
      }
    },
    "/config/{configName}": {"get": {
      "summary": "Get configuration",
      "security": [{"oauth2schema": ["global"]}],
      "produces": ["application/json;charset=UTF-8"],
      "description": "Get the configuration for registration/verification",
      "operationId": "getConfiguration",
      "responses": {
        "200": {
          "schema": {"$ref": "#/definitions/ConfigurationResponse"},
          "description": "The configuration"
        },
        "400": {
          "schema": {"$ref": "#/definitions/ErrorResponse"},
          "description": "Invalid request"
        },
        "404": {
          "schema": {"$ref": "#/definitions/ErrorResponse"},
          "description": "Configuration not found"
        }
      },
      "parameters": [{
        "in": "path",
        "name": "configName",
        "description": "The configuration name this operation",
        "type": "string",
        "required": true
      }],
      "tags": ["Configuration"],
      "consumes": ["application/json"]
    }}
  },
  "host": "gw.api.cloud.sphereon.com",
  "schemes": ["https"],
  "securityDefinitions": {"oauth2schema": {
    "tokenUrl": "https://gw.api.cloud.sphereon.com/token",
    "scopes": {"global": "accessEverything"},
    "type": "oauth2",
    "flow": "application"
  }},
  "definitions": {
    "CommittedChain": {
      "description": "Commited Chain",
      "type": "object",
      "properties": {
        "chainId": {
          "description": "Chain ID",
          "readOnly": true,
          "type": "string"
        },
        "context": {"type": "string"}
      }
    },
    "ConfigurationResponse": {
      "description": "Committed context and settings response",
      "type": "object",
      "required": ["storedSettings"],
      "properties": {"storedSettings": {"$ref": "#/definitions/StoredSettings"}}
    },
    "ChainSettings": {
      "description": "Existence ChainSettings. Normally you only supply them once during chain creation or during a settings update. You can also supply them during a content request, but then it is up to you to also supply the correct setting during verify",
      "type": "object",
      "required": [
        "secret",
        "version"
      ],
      "properties": {
        "singleProofChain": {
          "description": "The proof chain id linked to the current configuration. This is a shared proof chain for all registrations",
          "type": "string"
        },
        "contentRegistrationChainTypes": {
          "description": "A set of content registration targets",
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "PER_HASH_PROOF_CHAIN",
              "SINGLE_PROOF_CHAIN"
            ]
          }
        },
        "metadataRegistrationChains": {
          "description": "A set of metadata registration targets (not in use currently)",
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "FILE_CHAIN",
              "PROOF_CHAIN",
              "METADATA_CHAIN"
            ]
          }
        },
        "secret": {
          "format": "byte",
          "description": "A secret that is used as a seed during hashing",
          "type": "string"
        },
        "version": {
          "format": "int32",
          "description": "The settings version (only 1 for now)",
          "type": "integer",
          "enum": [1]
        },
        "hashAlgorithm": {
          "description": "The hashing method used for the content. We always return and expect the convertInputToHashWhenNeeded in HEX form",
          "type": "string",
          "enum": [
            "SHA_256",
            "SHA_512"
          ]
        }
      }
    },
    "ChainConfiguration": {
      "type": "object",
      "required": [
        "accessMode",
        "context",
        "id",
        "name",
        "settingChainId"
      ],
      "properties": {
        "context": {"type": "string"},
        "name": {
          "readOnly": true,
          "type": "string"
        },
        "settingChainId": {"type": "string"},
        "id": {
          "readOnly": true,
          "type": "string"
        },
        "accessMode": {
          "readOnly": true,
          "type": "string",
          "enum": [
            "PUBLIC",
            "PRIVATE"
          ]
        }
      }
    },
    "Error": {
      "description": "An error",
      "type": "object",
      "required": [
        "code",
        "level",
        "message"
      ],
      "properties": {
        "code": {"type": "string"},
        "level": {
          "type": "string",
          "enum": [
            "INFO",
            "WARNING",
            "FATAL"
          ]
        },
        "cause": {"$ref": "#/definitions/Error"},
        "message": {"type": "string"}
      }
    },
    "StreamLocation": {
      "description": "Location record of data stream",
      "type": "object",
      "properties": {
        "folderPath": {"type": "string"},
        "filename": {"type": "string"},
        "id": {
          "readOnly": true,
          "type": "string"
        },
        "containerId": {"type": "string"},
        "originalFilename": {"type": "string"}
      }
    },
    "ErrorResponse": {
      "description": "The error response",
      "type": "object",
      "properties": {"errors": {
        "type": "array",
        "items": {"$ref": "#/definitions/Error"}
      }}
    },
    "VerifyContentResponse": {
      "description": "Verify Content response",
      "type": "object",
      "required": ["contextName"],
      "properties": {
        "registrationTime": {
          "format": "date-time",
          "description": "This is the first registration time from the singleProofChain or the perHashProofChain",
          "type": "string"
        },
        "contextName": {"type": "string"},
        "singleProofChain": {
          "description": "This is the single proof chain where all hashes are stored (if configured)",
          "$ref": "#/definitions/CommittedEntry"
        },
        "contentRegistrationChainTypes": {
          "description": "A set of content registration targets",
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "PER_HASH_PROOF_CHAIN",
              "SINGLE_PROOF_CHAIN"
            ]
          }
        },
        "requestId": {"type": "string"},
        "perHashProofChain": {
          "description": "This is the proof chain specific for the current hash (if configured)",
          "$ref": "#/definitions/CommittedEntry"
        },
        "registrationState": {
          "description": "This is the registration state from the singleProofChain or the perHashProofChain. If one of the chains has a registration this will return REGISTERED",
          "type": "string",
          "enum": [
            "NOT_REGISTERED",
            "PENDING",
            "REGISTERED"
          ]
        }
      }
    },
    "StoredSettings": {
      "description": "The stored chainSettings from the chainSettings chain",
      "type": "object",
      "required": [
        "chainConfiguration",
        "chainSettings",
        "context",
        "id",
        "settingsChain",
        "validFrom"
      ],
      "properties": {
        "singleProofChain": {
          "readOnly": true,
          "$ref": "#/definitions/CommittedChain"
        },
        "settingsChain": {
          "readOnly": true,
          "$ref": "#/definitions/CommittedChain"
        },
        "chainSettings": {
          "readOnly": true,
          "$ref": "#/definitions/ChainSettings"
        },
        "context": {
          "readOnly": true,
          "type": "string"
        },
        "chainConfiguration": {
          "readOnly": true,
          "$ref": "#/definitions/ChainConfiguration"
        },
        "id": {
          "readOnly": true,
          "type": "string"
        },
        "validFrom": {
          "format": "date-time",
          "readOnly": true,
          "type": "string"
        },
        "metaDataChain": {
          "readOnly": true,
          "$ref": "#/definitions/CommittedChain"
        }
      }
    },
    "ContentRequest": {
      "description": "Content existence request",
      "type": "object",
      "required": [
        "content",
        "hashProvider"
      ],
      "properties": {
        "hashProvider": {
          "description": "When CLIENT is supplied the content should already have been hashed by you. When SERVER is supplied we will convertInputToHashWhenNeeded the content",
          "type": "string",
          "enum": [
            "SERVER",
            "CLIENT"
          ]
        },
        "requestId": {
          "description": "An id that will be returned in the response.",
          "type": "string"
        },
        "content": {
          "format": "byte",
          "description": "The content to register.",
          "type": "string"
        }
      }
    },
    "CommittedEntry": {
      "description": "Commited Entry",
      "type": "object",
      "required": [
        "entryId",
        "registrationState"
      ],
      "properties": {
        "registrationTime": {
          "format": "date-time",
          "type": "string"
        },
        "chainId": {
          "description": "Chain ID",
          "readOnly": true,
          "type": "string"
        },
        "context": {"type": "string"},
        "registrationState": {
          "type": "string",
          "enum": [
            "NOT_REGISTERED",
            "PENDING",
            "REGISTERED"
          ]
        },
        "entryId": {"type": "string"}
      }
    },
    "RegisterContentResponse": {
      "description": "Committed Content response",
      "type": "object",
      "required": ["contextName"],
      "properties": {
        "contextName": {"type": "string"},
        "singleProofChain": {
          "description": "This is the single proof chain where all hashes are stored (if configured)",
          "$ref": "#/definitions/CommittedEntry"
        },
        "contentRegistrationChainTypes": {
          "description": "A set of content registration targets",
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "PER_HASH_PROOF_CHAIN",
              "SINGLE_PROOF_CHAIN"
            ]
          }
        },
        "requestId": {"type": "string"},
        "perHashProofChain": {
          "description": "This is the proof chain specific for the current hash (if configured)",
          "$ref": "#/definitions/CommittedEntry"
        }
      }
    },
    "CreateConfigurationRequest": {
      "description": "Create a context configuration",
      "type": "object",
      "required": [
        "accessMode",
        "context",
        "initialSettings",
        "name"
      ],
      "properties": {
        "initialSettings": {
          "description": "The initial context settings.",
          "$ref": "#/definitions/ChainSettings"
        },
        "context": {
          "description": "The Easy Blockchain API context.",
          "type": "string"
        },
        "name": {
          "description": "The configuration name.",
          "type": "string"
        },
        "accessMode": {
          "description": "The access mode for this configuration. Public means accessible to other tenants of the API as well. Currently public is only allowed for Sphereon itself",
          "type": "string",
          "enum": [
            "PUBLIC",
            "PRIVATE"
          ]
        }
      }
    }
  },
  "swagger": "2.0",
  "info": {
    "license": {
      "name": "Apache License Version 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0"
    },
    "contact": {
      "name": "Sphereon DevOps Team",
      "url": "https://sphereon.com",
      "email": "dev@sphereon.com"
    },
    "description": "With the Blockchain Proof API it is easy to prove or disprove existence of data at a certain point in time. Behind the scenes it stores entries using the Factom (bitcoin), Multichain or Ethereum blockchain by means of our generic blockchain API.\r\n\r\nThe flow is generally as follows:\r\n1. Make sure a configuration is present\r\n2. Register content by uploading a file, some content, or providing a Stream Location from the Storage API. When you upload content you have to tell the API whether the data has already been hashed or not. If not, or when uploading a file or stream location, the API will take care of the hashing\r\n3. Verify content by uploading a file, some content, or providing a Stream Location from the Storage API. When you upload content you have to tell the API whether the data has already been hashed or not. If not, or when uploading a file or stream location, the API will take care of the hashing. You will get back whether the content has been registered previously or not\r\n\r\nFull API Documentation: https://docs.sphereon.com/api/blockchain-proof/0.9/html\r\nInteractive testing: A web based test console is available in the Sphereon API Store at https://store.sphereon.com",
    "termsOfService": "https://docs.sphereon.com/api/blockchain-proof/0.9/html",
    "title": "Blockchain Proof",
    "version": "0.9"
  },
  "tags": [
    {
      "name": "Configuration",
      "description": "Configuration related API's"
    },
    {
      "name": "Verification",
      "description": "Verification related API's"
    },
    {
      "name": "Registration",
      "description": "Registration related API's"
    },
    {
      "name": "existence-controller",
      "description": "Existence Controller"
    }
  ]
}
/**
 * Blockchain Proof
 * With the Blockchain Proof API it is easy to prove or disprove existence of data at a certain point in time. Behind the scenes it stores entries using the Factom (bitcoin), Multichain or Ethereum blockchain by means of our generic blockchain API.    The flow is generally as follows:  1. Make sure a configuration is present  2. Register content by uploading a file, some content, or providing a Stream Location from the Storage API. When you upload content you have to tell the API whether the data has already been hashed or not. If not, or when uploading a file or stream location, the API will take care of the hashing  3. Verify content by uploading a file, some content, or providing a Stream Location from the Storage API. When you upload content you have to tell the API whether the data has already been hashed or not. If not, or when uploading a file or stream location, the API will take care of the hashing. You will get back whether the content has been registered previously or not    Full API Documentation: https://docs.sphereon.com/api/blockchain-proof/0.10/html  Interactive testing: A web based test console is available in the Sphereon API Store at https://store.sphereon.com
 *
 * OpenAPI spec version: 0.10
 * Contact: dev@sphereon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { Http, Headers, URLSearchParams }                    from '@angular/http';
import { RequestMethod, RequestOptions, RequestOptionsArgs } from '@angular/http';
import { Response, ResponseContentType }                     from '@angular/http';

import { Observable }                                        from 'rxjs/Observable';
import 'rxjs/add/operator/map';

import * as models                                           from '../model/models';
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class VerificationApi {

    protected basePath = 'https://gw.api.cloud.sphereon.com/blockchain/proof/0.10';
    public defaultHeaders: Headers = new Headers();
    public configuration: Configuration = new Configuration();

    constructor(protected http: Http, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
        }
    }

    /**
     * Verify content. Please provide the content in the request. You also have to provide whether you have hashed the content yourself, or whether is should be done on the server side
     * @summary Verify content
     * @param configName The configName for this operation
     * @param existence Verify content using the current settings
     * @param requestId Optional request id
     * @param base64Secret An alternate secret key in base64 format that overrides the value in your configuration.
     * @param suppliedSignature An alternate supplied Signature in base64 format that overrides the signature generation.
     * @param keyId An alternate crypto keys API id that will be used for signature generation.
     */
    public verifyUsingContent(configName: string, existence: models.ContentRequest, requestId?: string, base64Secret?: string, suppliedSignature?: string, keyId?: string, extraHttpRequestParams?: any): Observable<models.VerifyContentResponse> {
        return this.verifyUsingContentWithHttpInfo(configName, existence, requestId, base64Secret, suppliedSignature, keyId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Verify a hash of file/blob by supplying a Stream location of the Storage API. This Stream Location maps to a location of a file/blob on some remote cloud storage. Hashing will be done on the server side Please note that the binary data itself will not be stored, only the hash. Use the registerUsingContent endpoint if you'd like to store content
     * @summary Verify hash using the Storage API
     * @param configName The context for this operation
     * @param streamLocation The stream location on storage
     * @param requestId Optional request id
     * @param base64Secret An alternate secret key in base64 format that overrides the value in your configuration.
     * @param suppliedSignature An alternate supplied Signature in base64 format that overrides the signature generation.
     * @param keyId An alternate crypto keys API id that will be used for signature generation.
     */
    public verifyUsingLocation(configName: string, streamLocation: models.StreamLocation, requestId?: string, base64Secret?: string, suppliedSignature?: string, keyId?: string, extraHttpRequestParams?: any): Observable<models.VerifyContentResponse> {
        return this.verifyUsingLocationWithHttpInfo(configName, streamLocation, requestId, base64Secret, suppliedSignature, keyId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Verify a hash of content by supplying a file or some other binary data. Hashing will be done on the server side. Please note that the binary data itself will not be stored, only the hash. Use the registerUsingContent endpoint if you'd like to store content
     * @summary Verify bytestream/file hash
     * @param configName The configuration name this operation
     * @param stream The binary data (not hashed). Hashing will be done on the server side. The binary data will not be stored
     * @param fileName Optional input file name. Needed when using bytestreams instead of filestreams
     * @param requestId Optional request id
     * @param base64Secret An alternate secret key in base64 format that overrides the value in your configuration.
     * @param suppliedSignature An alternate supplied Signature in base64 format that overrides the signature generation.
     * @param keyId An alternate crypto keys API id that will be used for signature generation.
     */
    public verifyUsingStream(configName: string, stream: any, fileName?: string, requestId?: string, base64Secret?: string, suppliedSignature?: string, keyId?: string, extraHttpRequestParams?: any): Observable<models.VerifyContentResponse> {
        return this.verifyUsingStreamWithHttpInfo(configName, stream, fileName, requestId, base64Secret, suppliedSignature, keyId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }


    /**
     * Verify content
     * Verify content. Please provide the content in the request. You also have to provide whether you have hashed the content yourself, or whether is should be done on the server side
     * @param configName The configName for this operation
     * @param existence Verify content using the current settings
     * @param requestId Optional request id
     * @param base64Secret An alternate secret key in base64 format that overrides the value in your configuration.
     * @param suppliedSignature An alternate supplied Signature in base64 format that overrides the signature generation.
     * @param keyId An alternate crypto keys API id that will be used for signature generation.
     */
    public verifyUsingContentWithHttpInfo(configName: string, existence: models.ContentRequest, requestId?: string, base64Secret?: string, suppliedSignature?: string, keyId?: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/existence/${configName}/content'
                    .replace('${' + 'configName' + '}', String(configName));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'configName' is not null or undefined
        if (configName === null || configName === undefined) {
            throw new Error('Required parameter configName was null or undefined when calling verifyUsingContent.');
        }
        // verify required parameter 'existence' is not null or undefined
        if (existence === null || existence === undefined) {
            throw new Error('Required parameter existence was null or undefined when calling verifyUsingContent.');
        }
        if (requestId !== undefined && requestId !== null) {
            headers.set('requestId', String(requestId));
        }

        if (base64Secret !== undefined && base64Secret !== null) {
            headers.set('base64Secret', String(base64Secret));
        }

        if (suppliedSignature !== undefined && suppliedSignature !== null) {
            headers.set('suppliedSignature', String(suppliedSignature));
        }

        if (keyId !== undefined && keyId !== null) {
            headers.set('keyId', String(keyId));
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json;charset=UTF-8'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json;charset=UTF-8'
        ];

        // authentication (oauth2schema) required
        // oauth required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers.set('Authorization', 'Bearer ' + accessToken);
        }

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: existence == null ? '' : JSON.stringify(existence), // https://github.com/angular/angular/issues/10612
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Verify hash using the Storage API
     * Verify a hash of file/blob by supplying a Stream location of the Storage API. This Stream Location maps to a location of a file/blob on some remote cloud storage. Hashing will be done on the server side Please note that the binary data itself will not be stored, only the hash. Use the registerUsingContent endpoint if you&#39;d like to store content
     * @param configName The context for this operation
     * @param streamLocation The stream location on storage
     * @param requestId Optional request id
     * @param base64Secret An alternate secret key in base64 format that overrides the value in your configuration.
     * @param suppliedSignature An alternate supplied Signature in base64 format that overrides the signature generation.
     * @param keyId An alternate crypto keys API id that will be used for signature generation.
     */
    public verifyUsingLocationWithHttpInfo(configName: string, streamLocation: models.StreamLocation, requestId?: string, base64Secret?: string, suppliedSignature?: string, keyId?: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/existence/${configName}/streams/location'
                    .replace('${' + 'configName' + '}', String(configName));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'configName' is not null or undefined
        if (configName === null || configName === undefined) {
            throw new Error('Required parameter configName was null or undefined when calling verifyUsingLocation.');
        }
        // verify required parameter 'streamLocation' is not null or undefined
        if (streamLocation === null || streamLocation === undefined) {
            throw new Error('Required parameter streamLocation was null or undefined when calling verifyUsingLocation.');
        }
        if (requestId !== undefined && requestId !== null) {
            headers.set('requestId', String(requestId));
        }

        if (base64Secret !== undefined && base64Secret !== null) {
            headers.set('base64Secret', String(base64Secret));
        }

        if (suppliedSignature !== undefined && suppliedSignature !== null) {
            headers.set('suppliedSignature', String(suppliedSignature));
        }

        if (keyId !== undefined && keyId !== null) {
            headers.set('keyId', String(keyId));
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json;charset=UTF-8'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json;charset=UTF-8'
        ];

        // authentication (oauth2schema) required
        // oauth required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers.set('Authorization', 'Bearer ' + accessToken);
        }

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: streamLocation == null ? '' : JSON.stringify(streamLocation), // https://github.com/angular/angular/issues/10612
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Verify bytestream/file hash
     * Verify a hash of content by supplying a file or some other binary data. Hashing will be done on the server side. Please note that the binary data itself will not be stored, only the hash. Use the registerUsingContent endpoint if you&#39;d like to store content
     * @param configName The configuration name this operation
     * @param stream The binary data (not hashed). Hashing will be done on the server side. The binary data will not be stored
     * @param fileName Optional input file name. Needed when using bytestreams instead of filestreams
     * @param requestId Optional request id
     * @param base64Secret An alternate secret key in base64 format that overrides the value in your configuration.
     * @param suppliedSignature An alternate supplied Signature in base64 format that overrides the signature generation.
     * @param keyId An alternate crypto keys API id that will be used for signature generation.
     */
    public verifyUsingStreamWithHttpInfo(configName: string, stream: any, fileName?: string, requestId?: string, base64Secret?: string, suppliedSignature?: string, keyId?: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/existence/${configName}/streams/multipart'
                    .replace('${' + 'configName' + '}', String(configName));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        let formParams = new URLSearchParams();

        // verify required parameter 'configName' is not null or undefined
        if (configName === null || configName === undefined) {
            throw new Error('Required parameter configName was null or undefined when calling verifyUsingStream.');
        }
        // verify required parameter 'stream' is not null or undefined
        if (stream === null || stream === undefined) {
            throw new Error('Required parameter stream was null or undefined when calling verifyUsingStream.');
        }
        if (fileName !== undefined) {
            queryParameters.set('fileName', <any>fileName);
        }

        if (requestId !== undefined && requestId !== null) {
            headers.set('requestId', String(requestId));
        }

        if (base64Secret !== undefined && base64Secret !== null) {
            headers.set('base64Secret', String(base64Secret));
        }

        if (suppliedSignature !== undefined && suppliedSignature !== null) {
            headers.set('suppliedSignature', String(suppliedSignature));
        }

        if (keyId !== undefined && keyId !== null) {
            headers.set('keyId', String(keyId));
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'multipart/form-data'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json;charset=UTF-8'
        ];

        // authentication (oauth2schema) required
        // oauth required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers.set('Authorization', 'Bearer ' + accessToken);
        }

        headers.set('Content-Type', 'application/x-www-form-urlencoded');

        if (stream !== undefined) {
            formParams.set('stream', <any>stream);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: formParams.toString(),
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

}

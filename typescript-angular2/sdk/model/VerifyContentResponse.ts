/**
 * Blockchain Proof
 * With the Blockchain Proof API it is easy to prove or disprove existence of data at a certain point in time. Behind the scenes it stores entries using the Factom (bitcoin), Multichain or Ethereum blockchain by means of our generic blockchain API.    The flow is generally as follows:  1. Make sure a configuration is present  2. Register content by uploading a file, some content, or providing a Stream Location from the Storage API. When you upload content you have to tell the API whether the data has already been hashed or not. If not, or when uploading a file or stream location, the API will take care of the hashing  3. Verify content by uploading a file, some content, or providing a Stream Location from the Storage API. When you upload content you have to tell the API whether the data has already been hashed or not. If not, or when uploading a file or stream location, the API will take care of the hashing. You will get back whether the content has been registered previously or not    Full API Documentation: https://docs.sphereon.com/api/blockchain-proof/0.10/html  Interactive testing: A web based test console is available in the Sphereon API Store at https://store.sphereon.com
 *
 * OpenAPI spec version: 0.10
 * Contact: dev@sphereon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as models from './models';

/**
 * Verify Content response
 */
export interface VerifyContentResponse {
    /**
     * This is the first registration time from the singleProofChain or the perHashProofChain
     */
    registrationTime?: Date;

    contextName: string;

    /**
     * This is the single proof chain where all hashes are stored in a single chain (if configured)
     */
    singleProofChain?: models.CommittedEntry;

    /**
     * A set of content registration targets
     */
    contentRegistrationChainTypes: Array<VerifyContentResponse.ContentRegistrationChainTypesEnum>;

    /**
     * The signature type from the request or the default from the settings
     */
    signatureType: VerifyContentResponse.SignatureTypeEnum;

    /**
     * This is the proof chain specific for the current hash, so a chain per hash (if configured)
     */
    perHashProofChain?: models.CommittedEntry;

    requestId?: string;

    /**
     * The calculated signature in base64 form
     */
    base64Signature: string;

    /**
     * This is the registration state from the singleProofChain or the perHashProofChain. If one of the chains has a registration this will return REGISTERED
     */
    registrationState?: VerifyContentResponse.RegistrationStateEnum;

    /**
     * This is the signature state.
     */
    signatureState?: VerifyContentResponse.SignatureStateEnum;

    /**
     * The hash in base64 format that you supplied or that was calculated. This is the actual hash for the content
     */
    hash: string;

    /**
     * This is a message describing the signature state.
     */
    signatureStateMessage?: string;

    /**
     * The calculated signature in hex form
     */
    hexSignature: string;

}
export namespace VerifyContentResponse {
    export enum ContentRegistrationChainTypesEnum {
        PERHASHPROOFCHAIN = <any> 'PER_HASH_PROOF_CHAIN',
        SINGLEPROOFCHAIN = <any> 'SINGLE_PROOF_CHAIN'
    }
    export enum SignatureTypeEnum {
        KEYID = <any> 'KEY_ID',
        SUPPLIED = <any> 'SUPPLIED',
        SECRET = <any> 'SECRET',
        NONE = <any> 'NONE'
    }
    export enum RegistrationStateEnum {
        NOTREGISTERED = <any> 'NOT_REGISTERED',
        PENDING = <any> 'PENDING',
        REGISTERED = <any> 'REGISTERED'
    }
    export enum SignatureStateEnum {
        NotFound = <any> 'not found',
        Unsigned = <any> 'unsigned',
        Invalid = <any> 'invalid',
        Verified = <any> 'verified'
    }
}

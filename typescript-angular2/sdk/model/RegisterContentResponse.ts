/**
 * Blockchain Proof
 * With the Blockchain Proof API it is easy to prove or disprove existence of data at a certain point in time. Behind the scenes it stores entries using the Factom (bitcoin), Multichain or Ethereum blockchain by means of our generic blockchain API.    The flow is generally as follows:  1. Make sure a configuration is present  2. Register content by uploading a file, some content, or providing a Stream Location from the Storage API. When you upload content you have to tell the API whether the data has already been hashed or not. If not, or when uploading a file or stream location, the API will take care of the hashing  3. Verify content by uploading a file, some content, or providing a Stream Location from the Storage API. When you upload content you have to tell the API whether the data has already been hashed or not. If not, or when uploading a file or stream location, the API will take care of the hashing. You will get back whether the content has been registered previously or not    Full API Documentation: https://docs.sphereon.com/api/blockchain-proof/0.10/html  Interactive testing: A web based test console is available in the Sphereon API Store at https://store.sphereon.com
 *
 * OpenAPI spec version: 0.10
 * Contact: dev@sphereon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { CommittedEntry } from './committedEntry';


/**
 * Committed Content response
 */
export interface RegisterContentResponse {
    contextName: string;
    /**
     * This is the single proof chain where all hashes are stored (if configured)
     */
    singleProofChain?: CommittedEntry;
    /**
     * A set of content registration targets
     */
    contentRegistrationChainTypes?: Array<RegisterContentResponse.ContentRegistrationChainTypesEnum>;
    requestId?: string;
    /**
     * The signature type from the request or the default from the settings
     */
    signatureType: RegisterContentResponse.SignatureTypeEnum;
    /**
     * This is the proof chain specific for the current hash (if configured)
     */
    perHashProofChain?: CommittedEntry;
    /**
     * The calculated signature in base64 form
     */
    base64Signature: string;
    /**
     * The hash in base64 format that you supplied or that was calculated. This is the actual hash for the content
     */
    hash: string;
    /**
     * The calculated signature in hex form
     */
    hexSignature: string;
}
export namespace RegisterContentResponse {
    export type ContentRegistrationChainTypesEnum = 'PER_HASH_PROOF_CHAIN' | 'SINGLE_PROOF_CHAIN';
    export const ContentRegistrationChainTypesEnum = {
        PERHASHPROOFCHAIN: 'PER_HASH_PROOF_CHAIN' as ContentRegistrationChainTypesEnum,
        SINGLEPROOFCHAIN: 'SINGLE_PROOF_CHAIN' as ContentRegistrationChainTypesEnum
    }
    export type SignatureTypeEnum = 'KEY_ID' | 'SUPPLIED' | 'SECRET' | 'NONE';
    export const SignatureTypeEnum = {
        KEYID: 'KEY_ID' as SignatureTypeEnum,
        SUPPLIED: 'SUPPLIED' as SignatureTypeEnum,
        SECRET: 'SECRET' as SignatureTypeEnum,
        NONE: 'NONE' as SignatureTypeEnum
    }
}

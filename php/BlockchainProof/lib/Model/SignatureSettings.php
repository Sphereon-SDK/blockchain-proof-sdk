<?php
/**
 * SignatureSettings
 *
 * PHP version 5
 *
 * @category Class
 * @package  Sphereon\SDK\Blockchain\Proof
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Blockchain Proof
 *
 * With the Blockchain Proof API it is easy to prove or disprove existence of data at a certain point in time. Behind the scenes it stores entries using the Factom (bitcoin), Multichain or Ethereum blockchain by means of our generic blockchain API.    The flow is generally as follows:  1. Make sure a configuration is present  2. Register content by uploading a file, some content, or providing a Stream Location from the Storage API. When you upload content you have to tell the API whether the data has already been hashed or not. If not, or when uploading a file or stream location, the API will take care of the hashing  3. Verify content by uploading a file, some content, or providing a Stream Location from the Storage API. When you upload content you have to tell the API whether the data has already been hashed or not. If not, or when uploading a file or stream location, the API will take care of the hashing. You will get back whether the content has been registered previously or not    Full API Documentation: https://docs.sphereon.com/api/blockchain-proof/0.10/html  Interactive testing: A web based test console is available in the Sphereon API Store at https://store.sphereon.com
 *
 * OpenAPI spec version: 0.10
 * Contact: dev@sphereon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Sphereon\SDK\Blockchain\Proof\Model;

use \ArrayAccess;
use \Sphereon\SDK\Blockchain\Proof\ObjectSerializer;

/**
 * SignatureSettings Class Doc Comment
 *
 * @category Class
 * @description How to calculate the signature
 * @package  Sphereon\SDK\Blockchain\Proof
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SignatureSettings implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SignatureSettings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'base64_secret' => 'string',
        'key_config' => 'string',
        'supplied_signature' => 'string',
        'signature_type' => 'string',
        'key_id' => 'string',
        'key_qualification' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'base64_secret' => null,
        'key_config' => null,
        'supplied_signature' => null,
        'signature_type' => null,
        'key_id' => null,
        'key_qualification' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'base64_secret' => 'base64Secret',
        'key_config' => 'keyConfig',
        'supplied_signature' => 'suppliedSignature',
        'signature_type' => 'signatureType',
        'key_id' => 'keyId',
        'key_qualification' => 'keyQualification'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'base64_secret' => 'setBase64Secret',
        'key_config' => 'setKeyConfig',
        'supplied_signature' => 'setSuppliedSignature',
        'signature_type' => 'setSignatureType',
        'key_id' => 'setKeyId',
        'key_qualification' => 'setKeyQualification'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'base64_secret' => 'getBase64Secret',
        'key_config' => 'getKeyConfig',
        'supplied_signature' => 'getSuppliedSignature',
        'signature_type' => 'getSignatureType',
        'key_id' => 'getKeyId',
        'key_qualification' => 'getKeyQualification'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const SIGNATURE_TYPE_KEY_ID = 'KEY_ID';
    const SIGNATURE_TYPE_SUPPLIED = 'SUPPLIED';
    const SIGNATURE_TYPE_SECRET = 'SECRET';
    const SIGNATURE_TYPE_NONE = 'NONE';
    const KEY_QUALIFICATION_KEY_NAME_ONLY = 'KEY_NAME_ONLY';
    const KEY_QUALIFICATION_FULLY_QUALIFIED_KEY_ID = 'FULLY_QUALIFIED_KEY_ID';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSignatureTypeAllowableValues()
    {
        return [
            self::SIGNATURE_TYPE_KEY_ID,
            self::SIGNATURE_TYPE_SUPPLIED,
            self::SIGNATURE_TYPE_SECRET,
            self::SIGNATURE_TYPE_NONE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getKeyQualificationAllowableValues()
    {
        return [
            self::KEY_QUALIFICATION_KEY_NAME_ONLY,
            self::KEY_QUALIFICATION_FULLY_QUALIFIED_KEY_ID,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['base64_secret'] = isset($data['base64_secret']) ? $data['base64_secret'] : null;
        $this->container['key_config'] = isset($data['key_config']) ? $data['key_config'] : null;
        $this->container['supplied_signature'] = isset($data['supplied_signature']) ? $data['supplied_signature'] : null;
        $this->container['signature_type'] = isset($data['signature_type']) ? $data['signature_type'] : null;
        $this->container['key_id'] = isset($data['key_id']) ? $data['key_id'] : null;
        $this->container['key_qualification'] = isset($data['key_qualification']) ? $data['key_qualification'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['signature_type'] === null) {
            $invalidProperties[] = "'signature_type' can't be null";
        }
        $allowedValues = $this->getSignatureTypeAllowableValues();
        if (!in_array($this->container['signature_type'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'signature_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getKeyQualificationAllowableValues();
        if (!in_array($this->container['key_qualification'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'key_qualification', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['signature_type'] === null) {
            return false;
        }
        $allowedValues = $this->getSignatureTypeAllowableValues();
        if (!in_array($this->container['signature_type'], $allowedValues)) {
            return false;
        }
        $allowedValues = $this->getKeyQualificationAllowableValues();
        if (!in_array($this->container['key_qualification'], $allowedValues)) {
            return false;
        }
        return true;
    }


    /**
     * Gets base64_secret
     *
     * @return string
     */
    public function getBase64Secret()
    {
        return $this->container['base64_secret'];
    }

    /**
     * Sets base64_secret
     *
     * @param string $base64_secret An alternate base64Secret key that overrides the value in your configuration in base64. Used for generating a signature with a base64Secret
     *
     * @return $this
     */
    public function setBase64Secret($base64_secret)
    {
        $this->container['base64_secret'] = $base64_secret;

        return $this;
    }

    /**
     * Gets key_config
     *
     * @return string
     */
    public function getKeyConfig()
    {
        return $this->container['key_config'];
    }

    /**
     * Sets key_config
     *
     * @param string $key_config Crypto keys config name when KEY_NAME_ONLY is supplied for key qualification
     *
     * @return $this
     */
    public function setKeyConfig($key_config)
    {
        $this->container['key_config'] = $key_config;

        return $this;
    }

    /**
     * Gets supplied_signature
     *
     * @return string
     */
    public function getSuppliedSignature()
    {
        return $this->container['supplied_signature'];
    }

    /**
     * Sets supplied_signature
     *
     * @param string $supplied_signature Only use this if you calculate your own signature. Otherwise always leave this blank! We will use the signature as is for registration/verification
     *
     * @return $this
     */
    public function setSuppliedSignature($supplied_signature)
    {
        $this->container['supplied_signature'] = $supplied_signature;

        return $this;
    }

    /**
     * Gets signature_type
     *
     * @return string
     */
    public function getSignatureType()
    {
        return $this->container['signature_type'];
    }

    /**
     * Sets signature_type
     *
     * @param string $signature_type How to calculate the signature during registration and verification. Defaults to the configured value if omitted
     *
     * @return $this
     */
    public function setSignatureType($signature_type)
    {
        $allowedValues = $this->getSignatureTypeAllowableValues();
        if (!in_array($signature_type, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'signature_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['signature_type'] = $signature_type;

        return $this;
    }

    /**
     * Gets key_id
     *
     * @return string
     */
    public function getKeyId()
    {
        return $this->container['key_id'];
    }

    /**
     * Sets key_id
     *
     * @param string $key_id Use a symmetric or asymmetric key from the crypto keys API to generate the signature.
     *
     * @return $this
     */
    public function setKeyId($key_id)
    {
        $this->container['key_id'] = $key_id;

        return $this;
    }

    /**
     * Gets key_qualification
     *
     * @return string
     */
    public function getKeyQualification()
    {
        return $this->container['key_qualification'];
    }

    /**
     * Sets key_qualification
     *
     * @param string $key_qualification This determines whether yoy use fully qualified keyIds of the crypto-keys API in form (config/keys/keyname/version) or that you only use the keyname and provide the configuration here. The later means we will use the latest version by default
     *
     * @return $this
     */
    public function setKeyQualification($key_qualification)
    {
        $allowedValues = $this->getKeyQualificationAllowableValues();
        if (!is_null($key_qualification) && !in_array($key_qualification, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'key_qualification', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['key_qualification'] = $key_qualification;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



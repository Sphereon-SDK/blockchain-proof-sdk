<?php
/**
 * RegisterContentResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Sphereon\SDK\Blockchain\Proof
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Blockchain Proof
 *
 * With the Blockchain Proof API it is easy to prove or disprove existence of data at a certain point in time. Behind the scenes it stores entries using the Factom (bitcoin), Multichain or Ethereum blockchain by means of our generic blockchain API.    The flow is generally as follows:  1. Make sure a configuration is present  2. Register content by uploading a file, some content, or providing a Stream Location from the Storage API. When you upload content you have to tell the API whether the data has already been hashed or not. If not, or when uploading a file or stream location, the API will take care of the hashing  3. Verify content by uploading a file, some content, or providing a Stream Location from the Storage API. When you upload content you have to tell the API whether the data has already been hashed or not. If not, or when uploading a file or stream location, the API will take care of the hashing. You will get back whether the content has been registered previously or not    Full API Documentation: https://docs.sphereon.com/api/blockchain-proof/0.10/html  Interactive testing: A web based test console is available in the Sphereon API Store at https://store.sphereon.com
 *
 * OpenAPI spec version: 0.10
 * Contact: dev@sphereon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Sphereon\SDK\Blockchain\Proof\Model;

use \ArrayAccess;
use \Sphereon\SDK\Blockchain\Proof\ObjectSerializer;

/**
 * RegisterContentResponse Class Doc Comment
 *
 * @category Class
 * @description Committed Content response
 * @package  Sphereon\SDK\Blockchain\Proof
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RegisterContentResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'RegisterContentResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'context_name' => 'string',
        'single_proof_chain' => '\Sphereon\SDK\Blockchain\Proof\Model\CommittedEntry',
        'content_registration_chain_types' => 'string[]',
        'request_id' => 'string',
        'signature_type' => 'string',
        'per_hash_proof_chain' => '\Sphereon\SDK\Blockchain\Proof\Model\CommittedEntry',
        'base64_signature' => 'string',
        'hash' => 'string',
        'hex_signature' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'context_name' => null,
        'single_proof_chain' => null,
        'content_registration_chain_types' => null,
        'request_id' => null,
        'signature_type' => null,
        'per_hash_proof_chain' => null,
        'base64_signature' => null,
        'hash' => null,
        'hex_signature' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'context_name' => 'contextName',
        'single_proof_chain' => 'singleProofChain',
        'content_registration_chain_types' => 'contentRegistrationChainTypes',
        'request_id' => 'requestId',
        'signature_type' => 'signatureType',
        'per_hash_proof_chain' => 'perHashProofChain',
        'base64_signature' => 'base64Signature',
        'hash' => 'hash',
        'hex_signature' => 'hexSignature'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'context_name' => 'setContextName',
        'single_proof_chain' => 'setSingleProofChain',
        'content_registration_chain_types' => 'setContentRegistrationChainTypes',
        'request_id' => 'setRequestId',
        'signature_type' => 'setSignatureType',
        'per_hash_proof_chain' => 'setPerHashProofChain',
        'base64_signature' => 'setBase64Signature',
        'hash' => 'setHash',
        'hex_signature' => 'setHexSignature'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'context_name' => 'getContextName',
        'single_proof_chain' => 'getSingleProofChain',
        'content_registration_chain_types' => 'getContentRegistrationChainTypes',
        'request_id' => 'getRequestId',
        'signature_type' => 'getSignatureType',
        'per_hash_proof_chain' => 'getPerHashProofChain',
        'base64_signature' => 'getBase64Signature',
        'hash' => 'getHash',
        'hex_signature' => 'getHexSignature'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const CONTENT_REGISTRATION_CHAIN_TYPES_PER_HASH_PROOF_CHAIN = 'PER_HASH_PROOF_CHAIN';
    const CONTENT_REGISTRATION_CHAIN_TYPES_SINGLE_PROOF_CHAIN = 'SINGLE_PROOF_CHAIN';
    const SIGNATURE_TYPE_KEY_ID = 'KEY_ID';
    const SIGNATURE_TYPE_SUPPLIED = 'SUPPLIED';
    const SIGNATURE_TYPE_SECRET = 'SECRET';
    const SIGNATURE_TYPE_NONE = 'NONE';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getContentRegistrationChainTypesAllowableValues()
    {
        return [
            self::CONTENT_REGISTRATION_CHAIN_TYPES_PER_HASH_PROOF_CHAIN,
            self::CONTENT_REGISTRATION_CHAIN_TYPES_SINGLE_PROOF_CHAIN,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSignatureTypeAllowableValues()
    {
        return [
            self::SIGNATURE_TYPE_KEY_ID,
            self::SIGNATURE_TYPE_SUPPLIED,
            self::SIGNATURE_TYPE_SECRET,
            self::SIGNATURE_TYPE_NONE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['context_name'] = isset($data['context_name']) ? $data['context_name'] : null;
        $this->container['single_proof_chain'] = isset($data['single_proof_chain']) ? $data['single_proof_chain'] : null;
        $this->container['content_registration_chain_types'] = isset($data['content_registration_chain_types']) ? $data['content_registration_chain_types'] : null;
        $this->container['request_id'] = isset($data['request_id']) ? $data['request_id'] : null;
        $this->container['signature_type'] = isset($data['signature_type']) ? $data['signature_type'] : null;
        $this->container['per_hash_proof_chain'] = isset($data['per_hash_proof_chain']) ? $data['per_hash_proof_chain'] : null;
        $this->container['base64_signature'] = isset($data['base64_signature']) ? $data['base64_signature'] : null;
        $this->container['hash'] = isset($data['hash']) ? $data['hash'] : null;
        $this->container['hex_signature'] = isset($data['hex_signature']) ? $data['hex_signature'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['context_name'] === null) {
            $invalidProperties[] = "'context_name' can't be null";
        }
        if ($this->container['signature_type'] === null) {
            $invalidProperties[] = "'signature_type' can't be null";
        }
        $allowedValues = $this->getSignatureTypeAllowableValues();
        if (!in_array($this->container['signature_type'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'signature_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['base64_signature'] === null) {
            $invalidProperties[] = "'base64_signature' can't be null";
        }
        if ($this->container['hash'] === null) {
            $invalidProperties[] = "'hash' can't be null";
        }
        if ($this->container['hex_signature'] === null) {
            $invalidProperties[] = "'hex_signature' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['context_name'] === null) {
            return false;
        }
        if ($this->container['signature_type'] === null) {
            return false;
        }
        $allowedValues = $this->getSignatureTypeAllowableValues();
        if (!in_array($this->container['signature_type'], $allowedValues)) {
            return false;
        }
        if ($this->container['base64_signature'] === null) {
            return false;
        }
        if ($this->container['hash'] === null) {
            return false;
        }
        if ($this->container['hex_signature'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets context_name
     *
     * @return string
     */
    public function getContextName()
    {
        return $this->container['context_name'];
    }

    /**
     * Sets context_name
     *
     * @param string $context_name context_name
     *
     * @return $this
     */
    public function setContextName($context_name)
    {
        $this->container['context_name'] = $context_name;

        return $this;
    }

    /**
     * Gets single_proof_chain
     *
     * @return \Sphereon\SDK\Blockchain\Proof\Model\CommittedEntry
     */
    public function getSingleProofChain()
    {
        return $this->container['single_proof_chain'];
    }

    /**
     * Sets single_proof_chain
     *
     * @param \Sphereon\SDK\Blockchain\Proof\Model\CommittedEntry $single_proof_chain This is the single proof chain where all hashes are stored (if configured)
     *
     * @return $this
     */
    public function setSingleProofChain($single_proof_chain)
    {
        $this->container['single_proof_chain'] = $single_proof_chain;

        return $this;
    }

    /**
     * Gets content_registration_chain_types
     *
     * @return string[]
     */
    public function getContentRegistrationChainTypes()
    {
        return $this->container['content_registration_chain_types'];
    }

    /**
     * Sets content_registration_chain_types
     *
     * @param string[] $content_registration_chain_types A set of content registration targets
     *
     * @return $this
     */
    public function setContentRegistrationChainTypes($content_registration_chain_types)
    {
        $allowedValues = $this->getContentRegistrationChainTypesAllowableValues();
        if (!is_null($content_registration_chain_types) && array_diff($content_registration_chain_types, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'content_registration_chain_types', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['content_registration_chain_types'] = $content_registration_chain_types;

        return $this;
    }

    /**
     * Gets request_id
     *
     * @return string
     */
    public function getRequestId()
    {
        return $this->container['request_id'];
    }

    /**
     * Sets request_id
     *
     * @param string $request_id request_id
     *
     * @return $this
     */
    public function setRequestId($request_id)
    {
        $this->container['request_id'] = $request_id;

        return $this;
    }

    /**
     * Gets signature_type
     *
     * @return string
     */
    public function getSignatureType()
    {
        return $this->container['signature_type'];
    }

    /**
     * Sets signature_type
     *
     * @param string $signature_type The signature type from the request or the default from the settings
     *
     * @return $this
     */
    public function setSignatureType($signature_type)
    {
        $allowedValues = $this->getSignatureTypeAllowableValues();
        if (!in_array($signature_type, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'signature_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['signature_type'] = $signature_type;

        return $this;
    }

    /**
     * Gets per_hash_proof_chain
     *
     * @return \Sphereon\SDK\Blockchain\Proof\Model\CommittedEntry
     */
    public function getPerHashProofChain()
    {
        return $this->container['per_hash_proof_chain'];
    }

    /**
     * Sets per_hash_proof_chain
     *
     * @param \Sphereon\SDK\Blockchain\Proof\Model\CommittedEntry $per_hash_proof_chain This is the proof chain specific for the current hash (if configured)
     *
     * @return $this
     */
    public function setPerHashProofChain($per_hash_proof_chain)
    {
        $this->container['per_hash_proof_chain'] = $per_hash_proof_chain;

        return $this;
    }

    /**
     * Gets base64_signature
     *
     * @return string
     */
    public function getBase64Signature()
    {
        return $this->container['base64_signature'];
    }

    /**
     * Sets base64_signature
     *
     * @param string $base64_signature The calculated signature in base64 form
     *
     * @return $this
     */
    public function setBase64Signature($base64_signature)
    {
        $this->container['base64_signature'] = $base64_signature;

        return $this;
    }

    /**
     * Gets hash
     *
     * @return string
     */
    public function getHash()
    {
        return $this->container['hash'];
    }

    /**
     * Sets hash
     *
     * @param string $hash The hash in base64 format that you supplied or that was calculated. This is the actual hash for the content
     *
     * @return $this
     */
    public function setHash($hash)
    {
        $this->container['hash'] = $hash;

        return $this;
    }

    /**
     * Gets hex_signature
     *
     * @return string
     */
    public function getHexSignature()
    {
        return $this->container['hex_signature'];
    }

    /**
     * Sets hex_signature
     *
     * @param string $hex_signature The calculated signature in hex form
     *
     * @return $this
     */
    public function setHexSignature($hex_signature)
    {
        $this->container['hex_signature'] = $hex_signature;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



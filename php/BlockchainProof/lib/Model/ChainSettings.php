<?php
/**
 * ChainSettings
 *
 * PHP version 5
 *
 * @category Class
 * @package  Sphereon\SDK\Blockchain\Proof
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Blockchain Proof
 *
 * With the Blockchain Proof API it is easy to prove or disprove existence of data at a certain point in time. Behind the scenes it stores entries using the Factom (bitcoin), Multichain or Ethereum blockchain by means of our generic blockchain API.    The flow is generally as follows:  1. Make sure a configuration is present  2. Register content by uploading a file, some content, or providing a Stream Location from the Storage API. When you upload content you have to tell the API whether the data has already been hashed or not. If not, or when uploading a file or stream location, the API will take care of the hashing  3. Verify content by uploading a file, some content, or providing a Stream Location from the Storage API. When you upload content you have to tell the API whether the data has already been hashed or not. If not, or when uploading a file or stream location, the API will take care of the hashing. You will get back whether the content has been registered previously or not    Full API Documentation: https://docs.sphereon.com/api/blockchain-proof/0.10/html  Interactive testing: A web based test console is available in the Sphereon API Store at https://store.sphereon.com
 *
 * OpenAPI spec version: 0.10
 * Contact: dev@sphereon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Sphereon\SDK\Blockchain\Proof\Model;

use \ArrayAccess;
use \Sphereon\SDK\Blockchain\Proof\ObjectSerializer;

/**
 * ChainSettings Class Doc Comment
 *
 * @category Class
 * @description Existence ChainSettings. Normally you only supply them once during chain creation or during a settings update. You can also supply them during a content request, but then it is up to you to also supply the correct setting during verify
 * @package  Sphereon\SDK\Blockchain\Proof
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ChainSettings implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ChainSettings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'single_proof_chain' => 'string',
        'content_registration_chain_types' => 'string[]',
        'signature_settings' => '\Sphereon\SDK\Blockchain\Proof\Model\SignatureSettings',
        'version' => 'int',
        'hash_algorithm' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'single_proof_chain' => null,
        'content_registration_chain_types' => null,
        'signature_settings' => null,
        'version' => 'int32',
        'hash_algorithm' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'single_proof_chain' => 'singleProofChain',
        'content_registration_chain_types' => 'contentRegistrationChainTypes',
        'signature_settings' => 'signatureSettings',
        'version' => 'version',
        'hash_algorithm' => 'hashAlgorithm'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'single_proof_chain' => 'setSingleProofChain',
        'content_registration_chain_types' => 'setContentRegistrationChainTypes',
        'signature_settings' => 'setSignatureSettings',
        'version' => 'setVersion',
        'hash_algorithm' => 'setHashAlgorithm'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'single_proof_chain' => 'getSingleProofChain',
        'content_registration_chain_types' => 'getContentRegistrationChainTypes',
        'signature_settings' => 'getSignatureSettings',
        'version' => 'getVersion',
        'hash_algorithm' => 'getHashAlgorithm'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const CONTENT_REGISTRATION_CHAIN_TYPES_PER_HASH_PROOF_CHAIN = 'PER_HASH_PROOF_CHAIN';
    const CONTENT_REGISTRATION_CHAIN_TYPES_SINGLE_PROOF_CHAIN = 'SINGLE_PROOF_CHAIN';
    const VERSION_1 = 1;
    const HASH_ALGORITHM__256 = 'SHA_256';
    const HASH_ALGORITHM__512 = 'SHA_512';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getContentRegistrationChainTypesAllowableValues()
    {
        return [
            self::CONTENT_REGISTRATION_CHAIN_TYPES_PER_HASH_PROOF_CHAIN,
            self::CONTENT_REGISTRATION_CHAIN_TYPES_SINGLE_PROOF_CHAIN,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getVersionAllowableValues()
    {
        return [
            self::VERSION_1,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getHashAlgorithmAllowableValues()
    {
        return [
            self::HASH_ALGORITHM__256,
            self::HASH_ALGORITHM__512,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['single_proof_chain'] = isset($data['single_proof_chain']) ? $data['single_proof_chain'] : null;
        $this->container['content_registration_chain_types'] = isset($data['content_registration_chain_types']) ? $data['content_registration_chain_types'] : null;
        $this->container['signature_settings'] = isset($data['signature_settings']) ? $data['signature_settings'] : null;
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
        $this->container['hash_algorithm'] = isset($data['hash_algorithm']) ? $data['hash_algorithm'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['content_registration_chain_types'] === null) {
            $invalidProperties[] = "'content_registration_chain_types' can't be null";
        }
        if ($this->container['signature_settings'] === null) {
            $invalidProperties[] = "'signature_settings' can't be null";
        }
        if ($this->container['version'] === null) {
            $invalidProperties[] = "'version' can't be null";
        }
        $allowedValues = $this->getVersionAllowableValues();
        if (!in_array($this->container['version'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'version', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getHashAlgorithmAllowableValues();
        if (!in_array($this->container['hash_algorithm'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'hash_algorithm', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['content_registration_chain_types'] === null) {
            return false;
        }
        if ($this->container['signature_settings'] === null) {
            return false;
        }
        if ($this->container['version'] === null) {
            return false;
        }
        $allowedValues = $this->getVersionAllowableValues();
        if (!in_array($this->container['version'], $allowedValues)) {
            return false;
        }
        $allowedValues = $this->getHashAlgorithmAllowableValues();
        if (!in_array($this->container['hash_algorithm'], $allowedValues)) {
            return false;
        }
        return true;
    }


    /**
     * Gets single_proof_chain
     *
     * @return string
     */
    public function getSingleProofChain()
    {
        return $this->container['single_proof_chain'];
    }

    /**
     * Sets single_proof_chain
     *
     * @param string $single_proof_chain The proof chain Id linked to the current configuration. This is a shared proof chain for all registrations/hashes. Only when the single proof chain type has been configured.
     *
     * @return $this
     */
    public function setSingleProofChain($single_proof_chain)
    {
        $this->container['single_proof_chain'] = $single_proof_chain;

        return $this;
    }

    /**
     * Gets content_registration_chain_types
     *
     * @return string[]
     */
    public function getContentRegistrationChainTypes()
    {
        return $this->container['content_registration_chain_types'];
    }

    /**
     * Sets content_registration_chain_types
     *
     * @param string[] $content_registration_chain_types A set of content registration chain types. This can be a single proof chain for all hashes, a more powerful chain per hash, or both
     *
     * @return $this
     */
    public function setContentRegistrationChainTypes($content_registration_chain_types)
    {
        $allowedValues = $this->getContentRegistrationChainTypesAllowableValues();
        if (array_diff($content_registration_chain_types, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'content_registration_chain_types', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['content_registration_chain_types'] = $content_registration_chain_types;

        return $this;
    }

    /**
     * Gets signature_settings
     *
     * @return \Sphereon\SDK\Blockchain\Proof\Model\SignatureSettings
     */
    public function getSignatureSettings()
    {
        return $this->container['signature_settings'];
    }

    /**
     * Sets signature_settings
     *
     * @param \Sphereon\SDK\Blockchain\Proof\Model\SignatureSettings $signature_settings Settings that determine how the signature should be registered/verified
     *
     * @return $this
     */
    public function setSignatureSettings($signature_settings)
    {
        $this->container['signature_settings'] = $signature_settings;

        return $this;
    }

    /**
     * Gets version
     *
     * @return int
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param int $version The settings version (only 1 for now)
     *
     * @return $this
     */
    public function setVersion($version)
    {
        $allowedValues = $this->getVersionAllowableValues();
        if (!in_array($version, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'version', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets hash_algorithm
     *
     * @return string
     */
    public function getHashAlgorithm()
    {
        return $this->container['hash_algorithm'];
    }

    /**
     * Sets hash_algorithm
     *
     * @param string $hash_algorithm The hashing method used for the content. We always return and expect the hash in base64 form
     *
     * @return $this
     */
    public function setHashAlgorithm($hash_algorithm)
    {
        $allowedValues = $this->getHashAlgorithmAllowableValues();
        if (!is_null($hash_algorithm) && !in_array($hash_algorithm, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'hash_algorithm', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['hash_algorithm'] = $hash_algorithm;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



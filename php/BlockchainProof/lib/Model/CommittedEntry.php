<?php
/**
 * CommittedEntry
 *
 * PHP version 5
 *
 * @category Class
 * @package  Sphereon\SDK\Blockchain\Proof
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Blockchain Proof
 *
 * With the Blockchain Proof API it is easy to prove or disprove existence of data at a certain point in time. Behind the scenes it stores entries using the Factom (bitcoin), Multichain or Ethereum blockchain by means of our generic blockchain API.    The flow is generally as follows:  1. Make sure a configuration is present  2. Register content by uploading a file, some content, or providing a Stream Location from the Storage API. When you upload content you have to tell the API whether the data has already been hashed or not. If not, or when uploading a file or stream location, the API will take care of the hashing  3. Verify content by uploading a file, some content, or providing a Stream Location from the Storage API. When you upload content you have to tell the API whether the data has already been hashed or not. If not, or when uploading a file or stream location, the API will take care of the hashing. You will get back whether the content has been registered previously or not    Full API Documentation: https://docs.sphereon.com/api/blockchain-proof/0.10/html  Interactive testing: A web based test console is available in the Sphereon API Store at https://store.sphereon.com
 *
 * OpenAPI spec version: 0.10
 * Contact: dev@sphereon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Sphereon\SDK\Blockchain\Proof\Model;

use \ArrayAccess;
use \Sphereon\SDK\Blockchain\Proof\ObjectSerializer;

/**
 * CommittedEntry Class Doc Comment
 *
 * @category Class
 * @description Commited Entry
 * @package  Sphereon\SDK\Blockchain\Proof
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CommittedEntry implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CommittedEntry';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'registration_time' => '\DateTime',
        'chain_id' => 'string',
        'context' => 'string',
        'registration_state' => 'string',
        'signature_state' => 'string',
        'signature_state_message' => 'string',
        'entry_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'registration_time' => 'date-time',
        'chain_id' => null,
        'context' => null,
        'registration_state' => null,
        'signature_state' => null,
        'signature_state_message' => null,
        'entry_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'registration_time' => 'registrationTime',
        'chain_id' => 'chainId',
        'context' => 'context',
        'registration_state' => 'registrationState',
        'signature_state' => 'signatureState',
        'signature_state_message' => 'signatureStateMessage',
        'entry_id' => 'entryId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'registration_time' => 'setRegistrationTime',
        'chain_id' => 'setChainId',
        'context' => 'setContext',
        'registration_state' => 'setRegistrationState',
        'signature_state' => 'setSignatureState',
        'signature_state_message' => 'setSignatureStateMessage',
        'entry_id' => 'setEntryId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'registration_time' => 'getRegistrationTime',
        'chain_id' => 'getChainId',
        'context' => 'getContext',
        'registration_state' => 'getRegistrationState',
        'signature_state' => 'getSignatureState',
        'signature_state_message' => 'getSignatureStateMessage',
        'entry_id' => 'getEntryId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const REGISTRATION_STATE_NOT_REGISTERED = 'NOT_REGISTERED';
    const REGISTRATION_STATE_PENDING = 'PENDING';
    const REGISTRATION_STATE_REGISTERED = 'REGISTERED';
    const SIGNATURE_STATE_NOT_FOUND = 'NOT_FOUND';
    const SIGNATURE_STATE_UNSIGNED = 'UNSIGNED';
    const SIGNATURE_STATE_INVALID = 'INVALID';
    const SIGNATURE_STATE_VERIFIED = 'VERIFIED';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRegistrationStateAllowableValues()
    {
        return [
            self::REGISTRATION_STATE_NOT_REGISTERED,
            self::REGISTRATION_STATE_PENDING,
            self::REGISTRATION_STATE_REGISTERED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSignatureStateAllowableValues()
    {
        return [
            self::SIGNATURE_STATE_NOT_FOUND,
            self::SIGNATURE_STATE_UNSIGNED,
            self::SIGNATURE_STATE_INVALID,
            self::SIGNATURE_STATE_VERIFIED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['registration_time'] = isset($data['registration_time']) ? $data['registration_time'] : null;
        $this->container['chain_id'] = isset($data['chain_id']) ? $data['chain_id'] : null;
        $this->container['context'] = isset($data['context']) ? $data['context'] : null;
        $this->container['registration_state'] = isset($data['registration_state']) ? $data['registration_state'] : null;
        $this->container['signature_state'] = isset($data['signature_state']) ? $data['signature_state'] : null;
        $this->container['signature_state_message'] = isset($data['signature_state_message']) ? $data['signature_state_message'] : null;
        $this->container['entry_id'] = isset($data['entry_id']) ? $data['entry_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['registration_state'] === null) {
            $invalidProperties[] = "'registration_state' can't be null";
        }
        $allowedValues = $this->getRegistrationStateAllowableValues();
        if (!in_array($this->container['registration_state'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'registration_state', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSignatureStateAllowableValues();
        if (!in_array($this->container['signature_state'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'signature_state', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['entry_id'] === null) {
            $invalidProperties[] = "'entry_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['registration_state'] === null) {
            return false;
        }
        $allowedValues = $this->getRegistrationStateAllowableValues();
        if (!in_array($this->container['registration_state'], $allowedValues)) {
            return false;
        }
        $allowedValues = $this->getSignatureStateAllowableValues();
        if (!in_array($this->container['signature_state'], $allowedValues)) {
            return false;
        }
        if ($this->container['entry_id'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets registration_time
     *
     * @return \DateTime
     */
    public function getRegistrationTime()
    {
        return $this->container['registration_time'];
    }

    /**
     * Sets registration_time
     *
     * @param \DateTime $registration_time The registration time of the entry. Only when registration has occurred ofcourse
     *
     * @return $this
     */
    public function setRegistrationTime($registration_time)
    {
        $this->container['registration_time'] = $registration_time;

        return $this;
    }

    /**
     * Gets chain_id
     *
     * @return string
     */
    public function getChainId()
    {
        return $this->container['chain_id'];
    }

    /**
     * Sets chain_id
     *
     * @param string $chain_id Chain Id
     *
     * @return $this
     */
    public function setChainId($chain_id)
    {
        $this->container['chain_id'] = $chain_id;

        return $this;
    }

    /**
     * Gets context
     *
     * @return string
     */
    public function getContext()
    {
        return $this->container['context'];
    }

    /**
     * Sets context
     *
     * @param string $context The context
     *
     * @return $this
     */
    public function setContext($context)
    {
        $this->container['context'] = $context;

        return $this;
    }

    /**
     * Gets registration_state
     *
     * @return string
     */
    public function getRegistrationState()
    {
        return $this->container['registration_state'];
    }

    /**
     * Sets registration_state
     *
     * @param string $registration_state The registration state of the entry
     *
     * @return $this
     */
    public function setRegistrationState($registration_state)
    {
        $allowedValues = $this->getRegistrationStateAllowableValues();
        if (!in_array($registration_state, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'registration_state', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['registration_state'] = $registration_state;

        return $this;
    }

    /**
     * Gets signature_state
     *
     * @return string
     */
    public function getSignatureState()
    {
        return $this->container['signature_state'];
    }

    /**
     * Sets signature_state
     *
     * @param string $signature_state This is the signature state.
     *
     * @return $this
     */
    public function setSignatureState($signature_state)
    {
        $allowedValues = $this->getSignatureStateAllowableValues();
        if (!is_null($signature_state) && !in_array($signature_state, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'signature_state', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['signature_state'] = $signature_state;

        return $this;
    }

    /**
     * Gets signature_state_message
     *
     * @return string
     */
    public function getSignatureStateMessage()
    {
        return $this->container['signature_state_message'];
    }

    /**
     * Sets signature_state_message
     *
     * @param string $signature_state_message This is a message describing the signature state.
     *
     * @return $this
     */
    public function setSignatureStateMessage($signature_state_message)
    {
        $this->container['signature_state_message'] = $signature_state_message;

        return $this;
    }

    /**
     * Gets entry_id
     *
     * @return string
     */
    public function getEntryId()
    {
        return $this->container['entry_id'];
    }

    /**
     * Sets entry_id
     *
     * @param string $entry_id The entry Id for the registration
     *
     * @return $this
     */
    public function setEntryId($entry_id)
    {
        $this->container['entry_id'] = $entry_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



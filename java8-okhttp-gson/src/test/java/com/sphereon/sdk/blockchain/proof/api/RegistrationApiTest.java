/*
 * Blockchain Proof
 * With the Blockchain Proof API it is easy to prove or disprove existence of data at a certain point in time. Behind the scenes it stores entries using the Factom (bitcoin), Multichain or Ethereum blockchain by means of our generic blockchain API.    The flow is generally as follows:  1. Make sure a configuration is present  2. Register content by uploading a file, some content, or providing a Stream Location from the Storage API. When you upload content you have to tell the API whether the data has already been hashed or not. If not, or when uploading a file or stream location, the API will take care of the hashing  3. Verify content by uploading a file, some content, or providing a Stream Location from the Storage API. When you upload content you have to tell the API whether the data has already been hashed or not. If not, or when uploading a file or stream location, the API will take care of the hashing. You will get back whether the content has been registered previously or not    Full API Documentation: https://docs.sphereon.com/api/blockchain-proof/0.9/html  Interactive testing: A web based test console is available in the Sphereon API Store at https://store.sphereon.com
 *
 * OpenAPI spec version: 0.9
 * Contact: dev@sphereon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.sphereon.sdk.blockchain.proof.api;

import com.sphereon.sdk.blockchain.proof.handler.ApiException;
import com.sphereon.sdk.blockchain.proof.model.ContentRequest;
import com.sphereon.sdk.blockchain.proof.model.ErrorResponse;
import java.io.File;
import com.sphereon.sdk.blockchain.proof.model.RegisterContentResponse;
import com.sphereon.sdk.blockchain.proof.model.StreamLocation;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for RegistrationApi
 */
@Ignore
public class RegistrationApiTest {

    private final RegistrationApi api = new RegistrationApi();

    
    /**
     * Register content
     *
     * Register content. Please provide the content in the request. You also have to provide whether you have hashed the content yourself, or whether is should be done on the server side
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void registerUsingContentTest() throws ApiException {
        String configName = null;
        ContentRequest existence = null;
        RegisterContentResponse response = api.registerUsingContent(configName, existence);

        // TODO: test validations
    }
    
    /**
     * Register hash using the Storage API
     *
     * Register a convertInputToHashWhenNeeded of file/blob by supplying a Stream location of the Storage API. This Stream Location maps to a location of a file/blob on some remote cloud storage. Hashing will be done on the server side Please note that the binary data itself will not be stored, only the convertInputToHashWhenNeeded. Use the registerUsingContent endpoint if you&#39;d like to store content
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void registerUsingLocationTest() throws ApiException {
        String configName = null;
        StreamLocation streamLocation = null;
        String requestId = null;
        RegisterContentResponse response = api.registerUsingLocation(configName, streamLocation, requestId);

        // TODO: test validations
    }
    
    /**
     * Register bytestream/file hash
     *
     * Register a convertInputToHashWhenNeeded of content by supplying a file or some other binary data. Hashing will be done on the server side. Please note that the binary data itself will not be stored, only the convertInputToHashWhenNeeded. Use the registerUsingContent endpoint if you&#39;d like to store content
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void registerUsingStreamTest() throws ApiException {
        String configName = null;
        File stream = null;
        String fileName = null;
        RegisterContentResponse response = api.registerUsingStream(configName, stream, fileName);

        // TODO: test validations
    }
    
}
